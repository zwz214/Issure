// paulfitz Thu Jun  3 09:39:19 IST 1999

// BEGIN BLOCK prefix
// Updated by paul on Tue Jun  8 11:15:38 IST 1999
// Part of a simple implementation of the standard C++ library, as
// described in ISO/IEC 14882:1998(E)

#ifndef __QAC_INCLUDE_new__
#define __QAC_INCLUDE_new__

// Some flags to control how closely the standard is followed
#include <qac_config.h>

// END BLOCK prefix

#include <exception>
#include <cstddef>

__QAC_BEGIN_NAMESPACE

  class bad_alloc;
  struct nothrow_t {};
  extern const nothrow_t nothrow;
  typedef void (*new_handler)();
  new_handler set_new_handler(new_handler new_p) noexcept;

  class bad_alloc : public exception {
  public:
    bad_alloc() noexcept;
    bad_alloc(const bad_alloc&) noexcept;
    bad_alloc& operator=(const bad_alloc&) noexcept;
    virtual ~bad_alloc() noexcept;
    virtual const char* what() const noexcept;
  };

__QAC_END_NAMESPACE

  void* operator new(std::size_t size) noexcept(false);
  void* operator new(std::size_t size, const std::nothrow_t&) noexcept;
  void  operator delete(void* ptr) noexcept;
  void  operator delete(void* ptr, const std::nothrow_t&) noexcept;
  void* operator new[](std::size_t size) noexcept(false);
  void* operator new[](std::size_t size, const std::nothrow_t&) noexcept;
  void  operator delete[](void* ptr) noexcept;
  void  operator delete[](void* ptr, const std::nothrow_t&) noexcept;

  void* operator new  (std::size_t size, void* ptr) noexcept;
  void* operator new[](std::size_t size, void* ptr) noexcept;
  void  operator delete  (void* ptr, void*) noexcept;
  void  operator delete[](void* ptr, void*) noexcept;

// BEGIN BLOCK postfix
// Updated by paul on Tue Jun  8 11:15:38 IST 1999
#endif // ends __QAC_INCLUDE_new__
// END BLOCK postfix

