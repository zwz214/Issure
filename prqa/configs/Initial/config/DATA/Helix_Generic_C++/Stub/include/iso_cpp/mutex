#ifndef __QAC_INCLUDE_mutex__
#define __QAC_INCLUDE_mutex__

// Some flags to control how closely the standard is followed
#include <qac_config.h>

#include <chrono>
#include <tuple>

__QAC_BEGIN_NAMESPACE

struct defer_lock_t { };
struct try_to_lock_t { };
struct adopt_lock_t { };

extern const defer_lock_t defer_lock;
extern const try_to_lock_t try_to_lock;
extern const adopt_lock_t adopt_lock;

class mutex {
public:
  typedef class __qacpp_mutex_native_handle native_handle_type;

  constexpr mutex() noexcept;
  ~mutex();
  mutex(const mutex&) = delete;
  mutex& operator=(const mutex&) = delete;

  void lock();
  bool try_lock();
  void unlock();

  native_handle_type native_handle();
};

class recursive_mutex {
public:
  typedef class __qacpp_recursive_mutex_native_handle native_handle_type;

  recursive_mutex();
  ~recursive_mutex();
  recursive_mutex(const recursive_mutex&) = delete;
  recursive_mutex& operator=(const mutex&) = delete;

  void lock();
  bool try_lock() noexcept;
  void unlock();

  native_handle_type native_handle();
};

class timed_mutex {
public:
  typedef class __qacpp_timed_mutex_native_handle native_handle_type;

  timed_mutex();
  ~ timed_mutex();
  timed_mutex(const timed_mutex&) = delete;
  timed_mutex& operator=(const timed_mutex&) = delete;

  void lock();                  // blocking
  bool try_lock();
  template <class Rep, class Period>
  bool try_lock_for(const chrono::duration<Rep, Period>& rel_time);
  template <class Clock, class Duration>
  bool try_lock_until(const chrono::time_point<Clock, Duration>& abs_time);
  void unlock();

  native_handle_type native_handle();
};

class recursive_timed_mutex {
public:
  typedef class __qacpp_recursive_timed_mutex_native_handle native_handle_type;

  recursive_timed_mutex();
  ~ recursive_timed_mutex();
  recursive_timed_mutex(const recursive_timed_mutex&) = delete;
  recursive_timed_mutex& operator=(const recursive_timed_mutex&) = delete;

  void lock();                  // blocking
  bool try_lock() noexcept;
  template <class Rep, class Period>
  bool try_lock_for(const chrono::duration<Rep, Period>& rel_time);
  template <class Clock, class Duration>
  bool try_lock_until(const chrono::time_point<Clock, Duration>& abs_time);
  void unlock();

  native_handle_type native_handle();
};

class shared_mutex {
public:
  typedef class __qacpp_shared_mutex_native_handle native_handle_type;

  shared_mutex();
  ~ shared_mutex();
  shared_mutex(const shared_mutex&) = delete;
  shared_mutex& operator=(const shared_mutex&) = delete;

  // Exclusive ownership
  void lock();                  // blocking
  bool try_lock();
  void unlock();

  // Shared ownership
  void lock_shared();           // blocking
  bool try_lock_shared();
  void unlock_shared();

  native_handle_type native_handle();
};

class shared_timed_mutex {
public:
  typedef class __qacpp_shared_timed_mutex_native_handle native_handle_type;

  shared_timed_mutex();
  ~ shared_timed_mutex();
  shared_timed_mutex(const shared_timed_mutex&) = delete;
  shared_timed_mutex& operator=(const shared_timed_mutex&) = delete;

  // Exclusive ownership
  void lock();

  // blocking
  bool try_lock();
  template <class Rep, class Period>
  bool try_lock_for(const chrono::duration<Rep, Period>& rel_time);
  template <class Clock, class Duration>
  bool try_lock_until(const chrono::time_point<Clock, Duration>& abs_time);
  void unlock();

  // Shared ownership
  void lock_shared();           // blocking
  bool try_lock_shared();
  template <class Rep, class Period>
  bool try_lock_shared_for(const chrono::duration<Rep, Period>& rel_time);
  template <class Clock, class Duration>
  bool try_lock_shared_until(const chrono::time_point<Clock, Duration>& abs_time);

  void unlock_shared();
};

template <class Mutex>
class lock_guard {
public:
  typedef Mutex mutex_type;

  explicit lock_guard(mutex_type& m);
  lock_guard(mutex_type& m, adopt_lock_t);
  ~lock_guard();
  lock_guard(lock_guard const&) = delete;
  lock_guard& operator=(lock_guard const&) = delete;
};

template <class... MutexTypes>
class scoped_lock {
public:
  explicit scoped_lock(MutexTypes&... m);
  explicit scoped_lock(adopt_lock_t, MutexTypes&... m);
  ~ scoped_lock();
  scoped_lock(const scoped_lock&) = delete;
  scoped_lock& operator=(const scoped_lock&) = delete;

private:
  tuple<MutexTypes&...> pm;
};

template <class Mutex>
class unique_lock {
public:
  typedef Mutex mutex_type;

  // 30.4.2.2.1, construct/copy/destroy:
  unique_lock() noexcept;
  explicit unique_lock(mutex_type& m);
  unique_lock(mutex_type& m, defer_lock_t) noexcept;
  unique_lock(mutex_type& m, try_to_lock_t);
  unique_lock(mutex_type& m, adopt_lock_t);
  template <class Clock, class Duration>
  unique_lock(mutex_type& m, const chrono::time_point<Clock, Duration>& abs_time);
  template <class Rep, class Period>
  unique_lock(mutex_type& m, const chrono::duration<Rep, Period>& rel_time);
  ~unique_lock();
  unique_lock(unique_lock const&) = delete;
  unique_lock& operator=(unique_lock const&) = delete;
  unique_lock(unique_lock&& u) noexcept;
  unique_lock& operator=(unique_lock&& u);

  // 30.4.2.2.2, locking:
  void lock();
  bool try_lock();
  template <class Rep, class Period>
  bool try_lock_for(const chrono::duration<Rep, Period>& rel_time);
  template <class Clock, class Duration>
  bool try_lock_until(const chrono::time_point<Clock, Duration>& abs_time);
  void unlock();

  // 30.4.2.2.3, modifiers:
  void swap(unique_lock& u) noexcept;
  mutex_type* release() noexcept;

  // 30.4.2.2.4, observers:
  bool owns_lock() const noexcept;
  explicit operator bool () const noexcept;
  mutex_type* mutex() const noexcept;
};

template <class Mutex>
void swap(unique_lock<Mutex>& x, unique_lock<Mutex>& y) noexcept;

template <class L1, class L2, class... L3> int try_lock(L1&, L2&, L3&...);
template <class L1, class L2, class... L3> void lock(L1&, L2&, L3&...);

struct once_flag {
  constexpr once_flag() noexcept;

  once_flag(const once_flag&) = delete;
  once_flag& operator=(const once_flag&) = delete;
};

template<class Callable, class ...Args>
void call_once(once_flag& flag, Callable&& func, Args&&... args);

__QAC_END_NAMESPACE

#endif
