#ifndef __QAC_INCLUDE_type_traits__
#define __QAC_INCLUDE_type_traits__

#include <qac_config.h>
#include <cstddef>
#include <utility>

__QAC_BEGIN_NAMESPACE

  // helpers
  struct __yes_type { char c[1]; };
  struct __no_type { char c[2]; };

  // forward declarations
  template <class T> struct remove_cv;
  template <class T, class U> struct is_same;

  // 20.9.3, helper class:
  template <class T, T v> struct integral_constant
  {
    static const T value = v;
    typedef T value_type;
    typedef integral_constant<T,v> type;
    operator value_type() { return value; }
  };

  typedef integral_constant<bool, true> true_type;
  typedef integral_constant<bool, false> false_type;

  // 20.9.4.1, primary type categories:
  template <class T> struct is_void : false_type { };
  template <> struct is_void<void> : true_type { };

  template <class T> struct __is_integral_noncv : false_type { };
  template <> struct __is_integral_noncv<bool> : true_type { };
  template <> struct __is_integral_noncv<char> : true_type { };
  template <> struct __is_integral_noncv<signed char> : true_type { };
#if !defined(PRQA_WCHAR_T)
  template <> struct __is_integral_noncv<wchar_t> : true_type { };
#endif
  template <> struct __is_integral_noncv<unsigned char> : true_type { };
  template <> struct __is_integral_noncv<signed short> : true_type { };
  template <> struct __is_integral_noncv<unsigned short> : true_type { };
  template <> struct __is_integral_noncv<signed int> : true_type { };
  template <> struct __is_integral_noncv<unsigned int> : true_type { };
  template <> struct __is_integral_noncv<signed long> : true_type { };
  template <> struct __is_integral_noncv<unsigned long> : true_type { };
#pragma PRQA_MESSAGES_OFF 47,48
  template <> struct __is_integral_noncv<signed long long> : true_type { };
  template <> struct __is_integral_noncv<unsigned long long> : true_type { };
#pragma PRQA_MESSAGES_ON 47,48

  template <class T> struct is_integral : __is_integral_noncv<typename remove_cv<T>::type> { };

  template <class T> struct __is_floating_point_noncv : false_type { };
  template <> struct __is_floating_point_noncv<float> : true_type { };
  template <> struct __is_floating_point_noncv<double> : true_type { };
  template <> struct __is_floating_point_noncv<long double> : true_type { };

  template <class T> struct is_floating_point : __is_floating_point_noncv<typename remove_cv<T>::type> { };

  template <class T> struct is_array : false_type { };
  template <class T> struct is_array<T[]> : true_type { };
  template <class T, size_t S> struct is_array<T[S]> : true_type { };

  template <class T> struct is_pointer : false_type { };
  template <class T> struct is_pointer<T *> : true_type { };

  template <class T> struct is_lvalue_reference : false_type { };
  template <class T> struct is_lvalue_reference<T &> : true_type { };

  template <class T> struct is_rvalue_reference : false_type { };

  template <class T> struct is_enum : integral_constant<bool, __qacpp_is_enum(T)> { };
  template <class T> struct is_union : integral_constant<bool, __qacpp_is_union(T)> { };
  template <class T> struct is_class : integral_constant<bool, __qacpp_is_class(T)> { };

#ifdef _QACPP_NOT_IMPLEMENTED
  template <class T> struct is_member_object_pointer;
  template <class T> struct is_member_function_pointer;
  template <class T> struct is_function;
#endif

  // 20.9.4.2, composite type categories:
  template <class T> struct is_reference : integral_constant<bool, is_lvalue_reference<T>::value || is_rvalue_reference<T>::value> { };
  template <class T> struct is_arithmetic : integral_constant<bool, is_integral<T>::value || is_floating_point<T>::value> { };
  template <class T> struct is_fundamental : integral_constant<bool, is_arithmetic<T>::value || is_same<typename remove_cv<T>::type, void>::value> { };

#ifdef _QACPP_NOT_IMPLEMENTED
  template <class T> struct is_object;
  template <class T> struct is_scalar;
  template <class T> struct is_compound;
#endif

  template <class T> struct is_member_pointer : false_type { };
  template <class T, class C> struct is_member_pointer<T C::*> : true_type { };

  // 20.9.4.3, type properties:
  template <class T> struct is_const : false_type { };
  template <class T> struct is_const<T const> : true_type { };

  template <class T> struct is_volatile : false_type { };
  template <class T> struct is_volatile<T volatile> : true_type { };

  template <class T> struct is_trivial : integral_constant<bool, __qacpp_is_trivial(T)> { };
  template <class T> struct is_trivially_copyable : integral_constant<bool, __qacpp_is_trivially_copyable(T)> { };
  template <class T> struct is_standard_layout : integral_constant<bool, __qacpp_is_standard_layout(T)> { };
  template <class T> struct is_pod : integral_constant<bool, __qacpp_is_pod(T)> { };
  template <class T> struct is_literal_type : integral_constant<bool, __qacpp_is_literal(T)> { };
  template <class T> struct is_empty : integral_constant<bool, __qacpp_is_empty(T)> { };
  template <class T> struct is_polymorphic : integral_constant<bool, __qacpp_is_polymorphic(T)> { };
  template <class T> struct is_abstract : integral_constant<bool, __qacpp_is_abstract(T)> { };

  template <class T> struct is_signed : integral_constant<bool, is_arithmetic<T>::value && (T(-1) < T(0))> { };
  template <class T> struct is_unsigned : integral_constant<bool, is_arithmetic<T>::value && (T(0) < T(-1))> { };

  template <class T> struct is_trivially_copy_assignable : integral_constant<bool, __qacpp_has_trivial_assign(T) > { };


  struct __is_destructible_impl
  {
    template<typename T, typename = decltype(declval<T&>().~T())>
    static __yes_type test(int);
    template<typename>
    static __no_type test(...);
  };

  template <class T> struct is_destructible : public integral_constant<bool, sizeof(__is_destructible_impl::test<T>(0)) == sizeof(__yes_type)> { };


  struct __is_default_constructible_impl
  {
    template<typename _Tp, typename = decltype(_Tp())>
    static __yes_type test(int);

    template<typename>
    static __no_type test(...);
  };

  template <class T> struct is_default_constructible : public integral_constant<bool, sizeof(__is_default_constructible_impl::test<T>(0)) == sizeof(__yes_type)> { };
  template <class T, std::size_t N> struct is_default_constructible<T[N]> : public is_default_constructible<T> { };
  template <class T> struct is_default_constructible<T[]> : public is_default_constructible<T> { };
  template <class T> struct is_default_constructible<T&> : public integral_constant<bool, false> { };
  template <class T> struct is_default_constructible<T&&> : public integral_constant<bool, false> { };
  template <> struct is_default_constructible<void> : public integral_constant<bool, false> { };
  template <> struct is_default_constructible<void const> : public integral_constant<bool, false> { };
  template <> struct is_default_constructible<void volatile> : public integral_constant<bool, false> { };
  template <> struct is_default_constructible<void const volatile> : public integral_constant<bool, false> { };


  struct __is_constructible_impl
  {
    template<typename T, typename ...TheArgs, typename = decltype(T(declval<TheArgs>()...))>
    static __yes_type test(int);
    template<typename, typename...>
    static __no_type test(...);

    template<typename T, typename Arg, typename = decltype(::new T(declval<Arg>()))>
    static __yes_type test1(int);
    template<typename, typename>
    static __no_type test1(...);

    template <typename T>
    static __yes_type ref_test(T);
    template <typename T>
    static __no_type ref_test(...);
  };

  template <class T, class ...Args> struct is_constructible : public integral_constant<bool, sizeof(__is_constructible_impl::test<T, Args...>(0)) == sizeof(__yes_type)> { };
  template <class T, class Arg> struct is_constructible<T, Arg> : public integral_constant<bool, is_destructible<T>::value && sizeof(__is_constructible_impl::test1<T, Arg>(0)) == sizeof(__yes_type)> { };
  template <class Ref, class Arg> struct is_constructible<Ref&, Arg> : public integral_constant<bool, sizeof(__is_constructible_impl::ref_test<Ref&>(declval<Arg>())) == sizeof(__yes_type)> { };
  template <class Ref, class Arg> struct is_constructible<Ref&&, Arg> : public integral_constant<bool, sizeof(__is_constructible_impl::ref_test<Ref&&>(declval<Arg>())) == sizeof(__yes_type)> { };

  template <> struct is_constructible<void> : public false_type{};
  template <> struct is_constructible<void const> : public false_type{};
  template <> struct is_constructible<void const volatile> : public false_type{};
  template <> struct is_constructible<void volatile> : public false_type{};

  template <class T> struct is_constructible<T> : public is_default_constructible<T>{};

  template <class T> struct is_copy_constructible : public is_constructible<T, const T&>{};
  template <> struct is_copy_constructible<void> : public false_type { };
  template <> struct is_copy_constructible<void const> : public false_type { };
  template <> struct is_copy_constructible<void const volatile> : public false_type { };
  template <> struct is_copy_constructible<void volatile> : public false_type { };

  template <class T> struct is_move_constructible : public is_constructible<T, T&&>{};
  template <> struct is_move_constructible<void> : public false_type { };
  template <> struct is_move_constructible<void const> : public false_type { };
  template <> struct is_move_constructible<void const volatile> : public false_type { };
  template <> struct is_move_constructible<void volatile> : public false_type { };

  template <class T> struct has_virtual_destructor : public integral_constant<bool, __qacpp_has_virtual_destructor(T)> { };

  template <class T, class ... Args> struct is_trivially_constructible : public integral_constant<bool, is_constructible<T, Args ...>::value && __qacpp_is_trivially_constructible(T, Args ...)> { };

  template<typename T> struct is_trivially_default_constructible : public is_trivially_constructible<T>::type { };
  template <class T> struct is_trivially_copy_constructible : public integral_constant<bool, is_copy_constructible<T>::value && __qacpp_is_trivially_constructible(T, const T &)> { };
  template <class T> struct is_trivially_move_constructible : public integral_constant<bool, is_copy_constructible<T>::value && __qacpp_is_trivially_constructible(T, T &&)> { };

  struct __is_assignable_impl
  {
    template<typename _T1, typename _T2,
             typename = decltype(declval<_T1>() = declval<_T2	>())>
    static __yes_type test(int);

    template<typename, typename>
    static __no_type test(...);
  };

  template<typename _T1, typename _T2>
  struct is_assignable : public integral_constant<bool, sizeof(__is_assignable_impl::test<_T1, _T2>(0)) == sizeof(__yes_type)> { };

  template <class T, class U> struct is_trivially_assignable : public integral_constant<bool, __qacpp_is_trivially_assignable(T, U)> { };
  template <class T> struct is_trivially_move_assignable : public integral_constant<bool, __qacpp_is_trivially_assignable(T &, T &&)> { };

#ifdef _QACPP_NOT_IMPLEMENTED
  template <class T> struct is_copy_assignable;
  template <class T> struct is_move_assignable;
  template <class T> struct is_trivially_default_constructible;
  template <class T> struct is_trivially_destructible;
  template <class T, class ... Args> struct is_nothrow_constructible;
  template <class T> struct is_nothrow_default_constructible;
  template <class T> struct is_nothrow_copy_constructible;
  template <class T> struct is_nothrow_move_constructible;
  template <class T, class U> struct is_nothrow_assignable;
  template <class T> struct is_nothrow_copy_assignable;
  template <class T> struct is_nothrow_move_assignable;
  template <class T> struct is_nothrow_destructible;

  // 20.9.5, type property queries:
  template <class T> struct alignment_of;
  template <class T> struct rank;
  template <class T, unsigned I = 0> struct extent;
#endif

  // 20.9.6, type relations:
  template <class T, class U> struct is_same : false_type { };
  template <class T> struct is_same<T, T> : true_type { };

  template <class Base, class Derived> struct is_base_of : integral_constant<bool, __qacpp_is_base_of(Base, Derived) || (!__qacpp_is_union(Base) && __qacpp_is_same(typename remove_cv<Base>::type, typename remove_cv<Derived>::type)) > { };
  template <class From, class To> struct is_convertible : integral_constant<bool, __qacpp_is_convertible(From, To) > { };

  // 20.9.7.1, const-volatile modifications:
  template <class T> struct remove_const { typedef T type; };
  template <class T> struct remove_const<T const> { typedef T type; };

  template <class T> struct remove_volatile { typedef T type; };
  template <class T> struct remove_volatile<T volatile> { typedef T type; };

  template <class T> struct remove_cv { typedef T type; };
  template <class T> struct remove_cv<T const> { typedef T type; };
  template <class T> struct remove_cv<T volatile> { typedef T type; };
  template <class T> struct remove_cv<T const volatile> { typedef T type; };

  template <class T> struct add_const { typedef T const type; };
  template <class T> struct add_volatile { typedef T volatile type; };
  template <class T> struct add_cv { typedef T const volatile type; };

  // 20.9.7.3, sign modifications:
  template <class T, class U, bool = is_const<U>::value, bool = is_volatile<U>::value>
  struct __match_cv { typedef T type; };

  template <class T, class U> struct __match_cv<T, U, true, false> { typedef T const type; };
  template <class T, class U> struct __match_cv<T, U, false, true> { typedef T volatile type; };
  template <class T, class U> struct __match_cv<T, U, true, true> { typedef T const volatile type; };

  template <class T> struct __make_signed_noncv { typedef T type; };
  template <> struct __make_signed_noncv<char> { typedef signed char type; };
  template <> struct __make_signed_noncv<unsigned char> { typedef signed char type; };
  template <> struct __make_signed_noncv<unsigned short> { typedef signed short type; };
  template <> struct __make_signed_noncv<unsigned int> { typedef signed int type; };
  template <> struct __make_signed_noncv<unsigned long> { typedef signed long type; };
#pragma PRQA_MESSAGES_OFF 47,48
  template <> struct __make_signed_noncv<unsigned long long> { typedef signed long long type; };
#pragma PRQA_MESSAGES_ON 47,48
  template <class T> struct make_signed : __match_cv<typename __make_signed_noncv<typename remove_cv<T>::type>::type, T> { };
  template <> struct make_signed<bool>;

  template <class T> struct __make_unsigned_noncv { typedef T type; };
  template <> struct __make_unsigned_noncv<char> { typedef unsigned char type; };
  template <> struct __make_unsigned_noncv<signed char> { typedef unsigned char type; };
  template <> struct __make_unsigned_noncv<signed short> { typedef unsigned short type; };
  template <> struct __make_unsigned_noncv<signed int> { typedef unsigned int type; };
  template <> struct __make_unsigned_noncv<signed long> { typedef unsigned long type; };
#pragma PRQA_MESSAGES_OFF 47,48
  template <> struct __make_unsigned_noncv<signed long long> { typedef unsigned long long type; };
#pragma PRQA_MESSAGES_ON 47,48
  template <class T> struct make_unsigned : __match_cv<typename __make_unsigned_noncv<typename remove_cv<T>::type>::type, T> { };
  template <> struct make_unsigned<bool>;

#ifdef _QACPP_NOT_IMPLEMENTED
  // 20.9.7.4, array modifications:
  template <class T> struct remove_extent;
  template <class T> struct remove_all_extents;
#endif

  // 20.9.7.5, pointer modifications:
  template <class T> struct remove_pointer;
  template <class T> struct add_pointer;

  // see 20.9.7.6
  template <size_t Len, size_t Align = 1>
    struct aligned_storage
  {
    union type
    {
      unsigned char __data[Len];
    };
  };
  template <size_t Len, class... Types> struct aligned_union
  {
    union type
    {
      unsigned char __data[Len];
    };
    static const size_t alignment_value = 1;
  };

  template <class T> struct decay
  {
    typedef typename remove_cv<typename remove_reference<T>::type>::type type;
  };


  template <bool, class T = void> struct enable_if { };
  template <class T = void> struct enable_if<true, T> { typedef T type; };

  template <bool, class T, class F> struct conditional { typedef F type; };
  template <class T, class F> struct conditional<true, T, F> { typedef T type; };

  template <class ... T> struct common_type;
  template <class T> struct underlying_type;
  template <class Fn, class... ArgTypes> struct invoke_result
  {
    typedef decltype(declval<Fn>() (declval<ArgTypes>() ...)) type;
  };
  template <class> class result_of;
  template <class F, class ... ArgTypes> class result_of<F(ArgTypes...)>;

  template <class T>
    using decay_t = typename decay<T>::type;
  template <class Fn, class... ArgTypes>
    using invoke_result_t = typename invoke_result<Fn, ArgTypes...>::type;

__QAC_END_NAMESPACE

#endif
