// paulfitz Thu Jun  3 09:39:18 IST 1999

// BEGIN BLOCK prefix
// Updated by paul on Tue Jun  8 11:15:38 IST 1999
// Part of a simple implementation of the standard C++ library, as
// described in ISO/IEC 14882:1998(E)

#ifndef __QAC_INCLUDE_map__
#define __QAC_INCLUDE_map__

// Some flags to control how closely the standard is followed
#include <qac_config.h>

// END BLOCK prefix

#include <qac_iterator.h>

#include <memory>
#include <functional>

__QAC_BEGIN_NAMESPACE

  template <class Key, class T, class Compare = less<Key>,
	    class Allocator = allocator<pair<const Key, T> > >
    class map;
  template <class Key, class T, class Compare, class Allocator>
    bool operator==(const map<Key,T,Compare,Allocator>& x,
		    const map<Key,T,Compare,Allocator>& y);
  template <class Key, class T, class Compare, class Allocator>
    bool operator< (const map<Key,T,Compare,Allocator>& x,
		    const map<Key,T,Compare,Allocator>& y);
  template <class Key, class T, class Compare, class Allocator>
    bool operator!=(const map<Key,T,Compare,Allocator>& x,
		    const map<Key,T,Compare,Allocator>& y);
  template <class Key, class T, class Compare, class Allocator>
    bool operator> (const map<Key,T,Compare,Allocator>& x,
		    const map<Key,T,Compare,Allocator>& y);
  template <class Key, class T, class Compare, class Allocator>
    bool operator>=(const map<Key,T,Compare,Allocator>& x,
		    const map<Key,T,Compare,Allocator>& y);
  template <class Key, class T, class Compare, class Allocator>
    bool operator<=(const map<Key,T,Compare,Allocator>& x,
		    const map<Key,T,Compare,Allocator>& y);
  template <class Key, class T, class Compare, class Allocator>
    void swap(map<Key,T,Compare,Allocator>& x,
	      map<Key,T,Compare,Allocator>& y);

  template <class Key, class T, class Compare = less<Key>,
	    class Allocator = allocator<pair<const Key, T> > >
    class multimap;
  template <class Key, class T, class Compare, class Allocator>
    bool operator==(const multimap<Key,T,Compare,Allocator>& x,
		    const multimap<Key,T,Compare,Allocator>& y);
  template <class Key, class T, class Compare, class Allocator>
    bool operator< (const multimap<Key,T,Compare,Allocator>& x,
		    const multimap<Key,T,Compare,Allocator>& y);
  template <class Key, class T, class Compare, class Allocator>
    bool operator!=(const multimap<Key,T,Compare,Allocator>& x,
		    const multimap<Key,T,Compare,Allocator>& y);
  template <class Key, class T, class Compare, class Allocator>
    bool operator> (const multimap<Key,T,Compare,Allocator>& x,
		    const multimap<Key,T,Compare,Allocator>& y);
  template <class Key, class T, class Compare, class Allocator>
    bool operator>=(const multimap<Key,T,Compare,Allocator>& x,
		    const multimap<Key,T,Compare,Allocator>& y);
  template <class Key, class T, class Compare, class Allocator>
    bool operator<=(const multimap<Key,T,Compare,Allocator>& x,
		    const multimap<Key,T,Compare,Allocator>& y);
  template <class Key, class T, class Compare, class Allocator>
    void swap(multimap<Key,T,Compare,Allocator>& x,
	      multimap<Key,T,Compare,Allocator>& y);

//  template <class Key, class T, class Compare = less<Key>,
//	    class Allocator = allocator<pair<const Key, T> > >
  template <class Key, class T, class Compare,
	    class Allocator>
  class map {
  public:
    //  types:
    typedef Key                                   key_type;
    typedef T                                     mapped_type;
    typedef pair<const Key, T>                    value_type;
    typedef Compare                               key_compare;
    typedef Allocator                             allocator_type;
    typedef typename Allocator::reference         reference;
    typedef typename Allocator::const_reference   const_reference;

    // HIT picked 4 types - see lib.container.requirements	
    typedef __normal_iterator<value_type*, map<T, Allocator> >
                                                  iterator;
    typedef __normal_iterator<const value_type*, map<T, Allocator> >
                                                  const_iterator;
    typedef size_t                                size_type;
    typedef ptrdiff_t                             difference_type;

    typedef typename Allocator::pointer           pointer;
    typedef typename Allocator::const_pointer     const_pointer;
    typedef std::reverse_iterator<iterator>       reverse_iterator;
    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;

    class value_compare
      : public binary_function<value_type,value_type,bool> {
    friend class map<Key, T, Compare, Allocator>;
    protected:
      Compare comp;
      value_compare(Compare c) : comp(c) {}
    public:
      bool operator()(const value_type& x, const value_type& y) const {
	return comp(x.first, y.first);
      }
    };

    //  lib.map.cons construct/copy/destroy:
    explicit map(const Compare& comp = Compare(),
		 const Allocator& = Allocator())                                 { Compare c(comp); Allocator().allocate (sizeof(value_type)); } 
    template <class InputIterator>
      map(InputIterator first, InputIterator last,
	  const Compare& comp = Compare(), const Allocator& = Allocator()) { insert (first, last); } 
    map(const map<Key,T,Compare,Allocator>& x)                       { insert (x.begin (), x.end ()); } 
   ~map()                                                            { } 
    map<Key,T,Compare,Allocator>&
      operator=(const map<Key,T,Compare,Allocator>& x)               { map(x).swap(*this); return *this; }

    //
    // Not in C++ 14882:1998
    allocator_type get_allocator() const { static allocator_type  * volatile r; return * r; }

    //  iterators:
    iterator               begin()         { static iterator * volatile r; return * r;  }
    const_iterator         begin() const   { static const_iterator * volatile r; return * r;  }
    const_iterator         cbegin() const  { static const_iterator * volatile r; return * r;  }
    iterator               end()           { static iterator * volatile r; return * r;  }
    const_iterator         end() const     { static const_iterator * volatile r; return * r;  }
    const_iterator         cend() const    { static const_iterator * volatile r; return * r;  }
    reverse_iterator       rbegin()        { static reverse_iterator * volatile r; return * r;  }
    const_reverse_iterator rbegin() const  { static const_reverse_iterator * volatile r; return * r;  }
    const_reverse_iterator crbegin() const { static const_reverse_iterator * volatile r; return * r;  }
    reverse_iterator       rend()          { static reverse_iterator * volatile r; return * r;  }
    const_reverse_iterator rend() const    { static const_reverse_iterator * volatile r; return * r;  }
    const_reverse_iterator crend() const   { static const_reverse_iterator * volatile r; return * r;  }

    //  capacity:
    bool      empty() const               { static bool * volatile r; return * r;  }
    size_type size() const                { static size_type * volatile r; return * r;  }
    size_type max_size() const            { static size_type * volatile r; return * r;  }

    //  lib.map.access element access:
    T& operator[](const key_type& x)                                    { return insert(make_pair (x, mapped_type ())).first->second; }
    T& at(const key_type& x)                                            { return find(x)->second; }
    const T& at(const key_type& x) const                                { return find(x)->second; }

    //  modifiers:
    pair<iterator, bool> insert(const value_type& x)                    { static bool * volatile r; return make_pair (insert (begin (), x), *r); }
    iterator             insert(iterator pos, const value_type& x)
      { Compare()(begin()->first, x.first); Allocator().allocate (sizeof(value_type)); return pos; }
    template <class InputIterator>
      void insert(InputIterator first, InputIterator last)              { insert (begin(), *first); ++first; }

    void      erase(const_iterator position)                            { }
    void      erase(iterator position)                                  { }
    size_type erase(const key_type& x)                                  { iterator iter = find (x); erase (iter); static size_type  * volatile r; return * r;  }
    void      erase(iterator first, iterator last)                      { }
    void swap(map<Key,T,Compare,Allocator>&)                            { }
    void clear()                                                        { erase (begin(), end ()); }

    //  observers:
    key_compare   key_comp() const                         { static key_compare  * volatile r; return * r; }
    value_compare value_comp() const;

    //  lib.map.ops map operations:
    iterator       find(const key_type& x)                 { iterator iter = begin(); key_comp()(iter->first, x); ++iter; return iter; }
    const_iterator find(const key_type& x) const           { const_iterator iter = begin(); key_comp()(iter->first, x); ++iter; return iter; }
    size_type      count(const key_type& x) const          { find(x); static size_type * volatile r; return * r;  }

    iterator       lower_bound(const key_type& x)          { return find(x); }
    const_iterator lower_bound(const key_type& x) const    { return find(x); }
    iterator       upper_bound(const key_type& x)          { return find(x); }
    const_iterator upper_bound(const key_type& x) const    { return find(x); }

    pair<iterator,iterator>
	equal_range(const key_type& x)                           { return make_pair (lower_bound(x), upper_bound(x)); }
    pair<const_iterator,const_iterator>
	equal_range(const key_type& x) const                     { return make_pair (lower_bound(x), upper_bound(x)); }
  };

  template <class Key, class T, class Compare, class Allocator>
    bool operator==(const map<Key,T,Compare,Allocator>& x,
		    const map<Key,T,Compare,Allocator>& y);
  template <class Key, class T, class Compare, class Allocator>
    bool operator< (const map<Key,T,Compare,Allocator>& x,
		    const map<Key,T,Compare,Allocator>& y);
  template <class Key, class T, class Compare, class Allocator>
    bool operator!=(const map<Key,T,Compare,Allocator>& x,
		    const map<Key,T,Compare,Allocator>& y);
  template <class Key, class T, class Compare, class Allocator>
    bool operator> (const map<Key,T,Compare,Allocator>& x,
		    const map<Key,T,Compare,Allocator>& y);
  template <class Key, class T, class Compare, class Allocator>
    bool operator>=(const map<Key,T,Compare,Allocator>& x,
		    const map<Key,T,Compare,Allocator>& y);
  template <class Key, class T, class Compare, class Allocator>
    bool operator<=(const map<Key,T,Compare,Allocator>& x,
		    const map<Key,T,Compare,Allocator>& y);

  //  specialized algorithms:
  template <class Key, class T, class Compare, class Allocator>
    void swap(map<Key,T,Compare,Allocator>& x,
	      map<Key,T,Compare,Allocator>& y);

//  template <class Key, class T, class Compare = less<Key>,
//	    class Allocator = allocator<pair<const Key, T> > >
  template <class Key, class T, class Compare,
	    class Allocator>
  class multimap {
  public:
    //  types:
    typedef Key                                   key_type;
    typedef T                                     mapped_type;
    typedef pair<const Key,T>                     value_type;
    typedef Compare                               key_compare;
    typedef Allocator                             allocator_type;
    typedef typename Allocator::reference         reference;
    typedef typename Allocator::const_reference   const_reference;

    // HIT picked 4 types - see lib.container.requirements	
    typedef __normal_iterator<value_type*, multimap<T, Allocator> >
                                                  iterator;
    typedef __normal_iterator<const value_type*, multimap<T, Allocator> >
                                                  const_iterator;
    typedef size_t                                size_type;
    typedef ptrdiff_t                             difference_type;

    typedef typename Allocator::pointer           pointer;
    typedef typename Allocator::const_pointer     const_pointer;
    typedef std::reverse_iterator<iterator>       reverse_iterator;
    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;

    class value_compare
      : public binary_function<value_type,value_type,bool> {
    friend class multimap<Key, T, Compare, Allocator>;
    protected:
      Compare comp;
      value_compare(Compare c) : comp(c) {}
    public:
      bool operator()(const value_type& x, const value_type& y) const {
	return comp(x.first, y.first);
      }
    };

    //  construct/copy/destroy:
    explicit multimap(const Compare& comp = Compare(),
		      const Allocator& = Allocator());
    template <class InputIterator>
      multimap(InputIterator first, InputIterator last,
	       const Compare& comp = Compare(),
	       const Allocator& = Allocator());
    multimap(const multimap<Key,T,Compare,Allocator>& x);
   ~multimap();
    multimap<Key,T,Compare,Allocator>&
      operator=(const multimap<Key,T,Compare,Allocator>& x);
    allocator_type get_allocator() const;

    //  iterators:
    iterator               begin();
    const_iterator         begin() const;
    const_iterator         cbegin() const;
    iterator               end();
    const_iterator         end() const;
    const_iterator         cend() const;
    reverse_iterator       rbegin();
    const_reverse_iterator rbegin() const;
    const_reverse_iterator crbegin() const;
    reverse_iterator       rend();
    const_reverse_iterator rend() const;
    const_reverse_iterator crend() const;

    //  capacity:
    bool           empty() const;
    size_type      size() const;
    size_type      max_size() const;

    //  modifiers:
    iterator insert(const value_type& x);
    iterator insert(iterator position, const value_type& x);
    template <class InputIterator>
      void insert(InputIterator first, InputIterator last);

    void      erase(iterator position);
    size_type erase(const key_type& x);
    void      erase(iterator first, iterator last);
    void swap(multimap<Key,T,Compare,Allocator>&);
    void clear();

    //  observers:
    key_compare    key_comp() const;
    value_compare  value_comp() const;

    //  map operations:
    iterator       find(const key_type& x);
    const_iterator find(const key_type& x) const;
    size_type      count(const key_type& x) const;

    iterator       lower_bound(const key_type& x);
    const_iterator lower_bound(const key_type& x) const;
    iterator       upper_bound(const key_type& x);
    const_iterator upper_bound(const key_type& x) const;

    pair<iterator,iterator>
      equal_range(const key_type& x);
    pair<const_iterator,const_iterator>
      equal_range(const key_type& x) const;
  };

  template <class Key, class T, class Compare, class Allocator>
    bool operator==(const multimap<Key,T,Compare,Allocator>& x,
		    const multimap<Key,T,Compare,Allocator>& y);
  template <class Key, class T, class Compare, class Allocator>
    bool operator< (const multimap<Key,T,Compare,Allocator>& x,
		    const multimap<Key,T,Compare,Allocator>& y);
  template <class Key, class T, class Compare, class Allocator>
    bool operator!=(const multimap<Key,T,Compare,Allocator>& x,
		    const multimap<Key,T,Compare,Allocator>& y);
  template <class Key, class T, class Compare, class Allocator>
    bool operator> (const multimap<Key,T,Compare,Allocator>& x,
		    const multimap<Key,T,Compare,Allocator>& y);
  template <class Key, class T, class Compare, class Allocator>
    bool operator>=(const multimap<Key,T,Compare,Allocator>& x,
		    const multimap<Key,T,Compare,Allocator>& y);
  template <class Key, class T, class Compare, class Allocator>
    bool operator<=(const multimap<Key,T,Compare,Allocator>& x,
		    const multimap<Key,T,Compare,Allocator>& y);

  //  specialized algorithms:
  template <class Key, class T, class Compare, class Allocator>
    void swap(multimap<Key,T,Compare,Allocator>& x,
	      multimap<Key,T,Compare,Allocator>& y);

__QAC_END_NAMESPACE

// BEGIN BLOCK postfix
// Updated by paul on Tue Jun  8 11:15:38 IST 1999
#endif // ends __QAC_INCLUDE_map__
// END BLOCK postfix

