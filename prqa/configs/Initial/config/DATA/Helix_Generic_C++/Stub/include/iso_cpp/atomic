#ifndef __QAC_INCLUDE_atomic__
#define __QAC_INCLUDE_atomic__

// Some flags to control how closely the standard is followed
#include <qac_config.h>
#include <cstddef>

__QAC_BEGIN_NAMESPACE

typedef enum memory_order {
  memory_order_relaxed, memory_order_consume, memory_order_acquire,
  memory_order_release, memory_order_acq_rel, memory_order_seq_cst
} memory_order;

template <class T>
T kill_dependency(T y) noexcept;

#define ATOMIC_BOOL_LOCK_FREE 1
#define ATOMIC_CHAR_LOCK_FREE 1
#define ATOMIC_CHAR16_T_LOCK_FREE 1
#define ATOMIC_CHAR32_T_LOCK_FREE 1
#define ATOMIC_WCHAR_T_LOCK_FREE 1
#define ATOMIC_SHORT_LOCK_FREE 1
#define ATOMIC_INT_LOCK_FREE 1
#define ATOMIC_LONG_LOCK_FREE 1
#define ATOMIC_LLONG_LOCK_FREE 1
#define ATOMIC_POINTER_LOCK_FREE 1

template <class T> struct atomic
{
  bool is_lock_free() const volatile noexcept;
  bool is_lock_free() const noexcept;
  static constexpr bool is_always_lock_free = 1;
  void store(T, memory_order = memory_order_seq_cst) volatile noexcept;
  void store(T, memory_order = memory_order_seq_cst) noexcept;
  T load(memory_order = memory_order_seq_cst) const volatile noexcept;
  T load(memory_order = memory_order_seq_cst) const noexcept;
  operator T() const volatile noexcept;
  operator T() const noexcept;
  T exchange(T, memory_order = memory_order_seq_cst) volatile noexcept;
  T exchange(T, memory_order = memory_order_seq_cst) noexcept;
  bool compare_exchange_weak(T&, T, memory_order, memory_order) volatile noexcept;
  bool compare_exchange_weak(T&, T, memory_order, memory_order) noexcept;
  bool compare_exchange_strong(T&, T, memory_order, memory_order) volatile noexcept;
  bool compare_exchange_strong(T&, T, memory_order, memory_order) noexcept;
  bool compare_exchange_weak(T&, T, memory_order = memory_order_seq_cst) volatile noexcept;
  bool compare_exchange_weak(T&, T, memory_order = memory_order_seq_cst) noexcept;
  bool compare_exchange_strong(T&, T, memory_order = memory_order_seq_cst) volatile noexcept;
  bool compare_exchange_strong(T&, T, memory_order = memory_order_seq_cst) noexcept;
  atomic() noexcept = default;
  constexpr atomic(T) noexcept;
  atomic(const atomic&) = delete;
  atomic& operator=(const atomic&) = delete;
  atomic& operator=(const atomic&) volatile = delete;
  T operator=(T) volatile noexcept;
  T operator=(T) noexcept;
};

#define _DEFINE_ATOMIC_INTEGRAL(integral) \
  template <> struct atomic<integral > { \
    bool is_lock_free() const volatile noexcept; \
    bool is_lock_free() const noexcept; \
    static constexpr bool is_always_lock_free = 1; \
    void store(integral , memory_order = memory_order_seq_cst) volatile noexcept; \
    void store(integral , memory_order = memory_order_seq_cst) noexcept; \
    integral load(memory_order = memory_order_seq_cst) const volatile noexcept; \
    integral load(memory_order = memory_order_seq_cst) const noexcept; \
    operator integral() const volatile noexcept; \
    operator integral() const noexcept; \
    integral exchange(integral , memory_order = memory_order_seq_cst) volatile noexcept; \
    integral exchange(integral , memory_order = memory_order_seq_cst) noexcept; \
    bool compare_exchange_weak(integral &, integral , memory_order, memory_order) volatile noexcept; \
    bool compare_exchange_weak(integral &, integral , memory_order, memory_order) noexcept; \
    bool compare_exchange_strong(integral &, integral , memory_order, memory_order) volatile noexcept; \
    bool compare_exchange_strong(integral &, integral , memory_order, memory_order) noexcept; \
    bool compare_exchange_weak(integral &, integral , memory_order = memory_order_seq_cst) volatile noexcept; \
    bool compare_exchange_weak(integral &, integral , memory_order = memory_order_seq_cst) noexcept; \
    bool compare_exchange_strong(integral &, integral , memory_order = memory_order_seq_cst) volatile noexcept; \
    bool compare_exchange_strong(integral &, integral , memory_order = memory_order_seq_cst) noexcept; \
    integral fetch_add(integral , memory_order = memory_order_seq_cst) volatile noexcept; \
    integral fetch_add(integral , memory_order = memory_order_seq_cst) noexcept; \
    integral fetch_sub(integral , memory_order = memory_order_seq_cst) volatile noexcept; \
    integral fetch_sub(integral , memory_order = memory_order_seq_cst) noexcept; \
    integral fetch_and(integral , memory_order = memory_order_seq_cst) volatile noexcept; \
    integral fetch_and(integral , memory_order = memory_order_seq_cst) noexcept; \
    integral fetch_or(integral , memory_order = memory_order_seq_cst) volatile noexcept; \
    integral fetch_or(integral , memory_order = memory_order_seq_cst) noexcept; \
    integral fetch_xor(integral , memory_order = memory_order_seq_cst) volatile noexcept; \
    integral fetch_xor(integral , memory_order = memory_order_seq_cst) noexcept; \
    atomic() noexcept = default; \
    constexpr atomic(integral ) noexcept; \
    atomic(const atomic&) = delete; \
    atomic& operator=(const atomic&) = delete; \
    atomic& operator=(const atomic&) volatile = delete; \
    integral operator=(integral ) volatile noexcept; \
    integral operator=(integral ) noexcept; \
    integral operator++(int) volatile noexcept; \
    integral operator++(int) noexcept; \
    integral operator--(int) volatile noexcept; \
    integral operator--(int) noexcept; \
    integral operator++() volatile noexcept; \
    integral operator++() noexcept; \
    integral operator--() volatile noexcept; \
    integral operator--() noexcept; \
    integral operator+=(integral ) volatile noexcept; \
    integral operator+=(integral ) noexcept; \
    integral operator-=(integral ) volatile noexcept; \
    integral operator-=(integral ) noexcept; \
    integral operator&=(integral ) volatile noexcept; \
    integral operator&=(integral ) noexcept; \
    integral operator|=(integral ) volatile noexcept; \
    integral operator|=(integral ) noexcept; \
    integral operator^=(integral ) volatile noexcept; \
    integral operator^=(integral ) noexcept; \
  }; \

_DEFINE_ATOMIC_INTEGRAL(bool)
_DEFINE_ATOMIC_INTEGRAL(char)
_DEFINE_ATOMIC_INTEGRAL(signed char)
_DEFINE_ATOMIC_INTEGRAL(unsigned char)
_DEFINE_ATOMIC_INTEGRAL(char16_t)
_DEFINE_ATOMIC_INTEGRAL(char32_t)
_DEFINE_ATOMIC_INTEGRAL(wchar_t)
_DEFINE_ATOMIC_INTEGRAL(short)
_DEFINE_ATOMIC_INTEGRAL(unsigned short)
_DEFINE_ATOMIC_INTEGRAL(int)
_DEFINE_ATOMIC_INTEGRAL(unsigned int)
_DEFINE_ATOMIC_INTEGRAL(long)
_DEFINE_ATOMIC_INTEGRAL(unsigned long)
_DEFINE_ATOMIC_INTEGRAL(long long)
_DEFINE_ATOMIC_INTEGRAL(unsigned long long)

#undef _DEFINE_ATOMIC_INTEGRAL


template <class T> struct atomic<T*> {
  bool is_lock_free() const volatile noexcept;
  bool is_lock_free() const noexcept;
  static constexpr bool is_always_lock_free = 1;
  void store(T*, memory_order = memory_order_seq_cst) volatile noexcept;
  void store(T*, memory_order = memory_order_seq_cst) noexcept;
  T* load(memory_order = memory_order_seq_cst) const volatile noexcept;
  T* load(memory_order = memory_order_seq_cst) const noexcept;
  operator T*() const volatile noexcept;
  operator T*() const noexcept;
  T* exchange(T*, memory_order = memory_order_seq_cst) volatile noexcept;
  T* exchange(T*, memory_order = memory_order_seq_cst) noexcept;
  bool compare_exchange_weak(T*&, T*, memory_order, memory_order) volatile noexcept;
  bool compare_exchange_weak(T*&, T*, memory_order, memory_order) noexcept;
  bool compare_exchange_strong(T*&, T*, memory_order, memory_order) volatile noexcept;
  bool compare_exchange_strong(T*&, T*, memory_order, memory_order) noexcept;
  bool compare_exchange_weak(T*&, T*, memory_order = memory_order_seq_cst) volatile noexcept;
  bool compare_exchange_weak(T*&, T*, memory_order = memory_order_seq_cst) noexcept;
  bool compare_exchange_strong(T*&, T*, memory_order = memory_order_seq_cst) volatile noexcept;
  bool compare_exchange_strong(T*&, T*, memory_order = memory_order_seq_cst) noexcept;
  T* fetch_add(ptrdiff_t, memory_order = memory_order_seq_cst) volatile noexcept;
  T* fetch_add(ptrdiff_t, memory_order = memory_order_seq_cst) noexcept;
  T* fetch_sub(ptrdiff_t, memory_order = memory_order_seq_cst) volatile noexcept;
  T* fetch_sub(ptrdiff_t, memory_order = memory_order_seq_cst) noexcept;
  atomic() noexcept = default;
  constexpr atomic(T*) noexcept;
  atomic(const atomic&) = delete;
  atomic& operator=(const atomic&) = delete;
  atomic& operator=(const atomic&) volatile = delete;
  T* operator=(T*) volatile noexcept;
  T* operator=(T*) noexcept;
  T* operator++(int) volatile noexcept;
  T* operator++(int) noexcept;
  T* operator--(int) volatile noexcept;
  T* operator--(int) noexcept;
  T* operator++() volatile noexcept;
  T* operator++() noexcept;
  T* operator--() volatile noexcept;
  T* operator--() noexcept;
  T* operator+=(ptrdiff_t) volatile noexcept;
  T* operator+=(ptrdiff_t) noexcept;
  T* operator-=(ptrdiff_t) volatile noexcept;
  T* operator-=(ptrdiff_t) noexcept;
};

template <class T>
bool atomic_is_lock_free(const volatile atomic<T> *) noexcept;
template <class T>
bool atomic_is_lock_free(const atomic<T> *) noexcept;
template <class T>
void atomic_init(volatile atomic<T> *, T) noexcept;
template <class T>
void atomic_init(atomic<T> *, T) noexcept;
template <class T>
void atomic_store(volatile atomic<T> *, T) noexcept;
template <class T>
void atomic_store(atomic<T> *, T) noexcept;
template <class T>
void atomic_store_explicit(volatile atomic<T> *, T, memory_order) noexcept;
template <class T>
void atomic_store_explicit(atomic<T> *, T, memory_order) noexcept;
template <class T>
T atomic_load(const volatile atomic<T> *) noexcept;
template <class T>
T atomic_load(const atomic<T> *) noexcept;
template <class T>
T atomic_load_explicit(const volatile atomic<T> *, memory_order) noexcept;
template <class T>
T atomic_load_explicit(const atomic<T> *, memory_order) noexcept;
template <class T>
T atomic_exchange(volatile atomic<T> *, T) noexcept;
template <class T>
T atomic_exchange(atomic<T> *, T) noexcept;
template <class T>
T atomic_exchange_explicit(volatile atomic<T> *, T, memory_order) noexcept;
template <class T>
T atomic_exchange_explicit(atomic<T> *, T, memory_order) noexcept;
template <class T>
bool atomic_compare_exchange_weak(volatile atomic<T> *, T*, T) noexcept;
template <class T>
bool atomic_compare_exchange_weak(atomic<T> *, T*, T) noexcept;
template <class T>
bool atomic_compare_exchange_strong(volatile atomic<T> *, T*, T) noexcept;
template <class T>
bool atomic_compare_exchange_strong(atomic<T> *, T*, T) noexcept;
template <class T>
bool atomic_compare_exchange_weak_explicit(volatile atomic<T> *, T*, T,
memory_order, memory_order) noexcept;
template <class T>
bool atomic_compare_exchange_weak_explicit(atomic<T> *, T*, T,
memory_order, memory_order) noexcept;
template <class T>
bool atomic_compare_exchange_strong_explicit(volatile atomic<T> *, T*, T,
memory_order, memory_order) noexcept;
template <class T>
bool atomic_compare_exchange_strong_explicit(atomic<T> *, T*, T,
memory_order, memory_order) noexcept;

template <class T>
T atomic_fetch_add(volatile atomic<T>*, T) noexcept;
template <class T>
T atomic_fetch_add(atomic<T>*, T) noexcept;
template <class T>
T atomic_fetch_add_explicit(volatile atomic<T>*, T, memory_order) noexcept;
template <class T>
T atomic_fetch_add_explicit(atomic<T>*, T, memory_order) noexcept;
template <class T>
T atomic_fetch_sub(volatile atomic<T>*, T) noexcept;
template <class T>
T atomic_fetch_sub(atomic<T>*, T) noexcept;
template <class T>
T atomic_fetch_sub_explicit(volatile atomic<T>*, T, memory_order) noexcept;
template <class T>
T atomic_fetch_sub_explicit(atomic<T>*, T, memory_order) noexcept;
template <class T>
T atomic_fetch_and(volatile atomic<T>*, T) noexcept;
template <class T>
T atomic_fetch_and(atomic<T>*, T) noexcept;
template <class T>
T atomic_fetch_and_explicit(volatile atomic<T>*, T, memory_order) noexcept;
template <class T>
T atomic_fetch_and_explicit(atomic<T>*, T, memory_order) noexcept;
template <class T>
T atomic_fetch_or(volatile atomic<T>*, T) noexcept;
template <class T>
T atomic_fetch_or(atomic<T>*, T) noexcept;
template <class T>
T atomic_fetch_or_explicit(volatile atomic<T>*, T, memory_order) noexcept;
template <class T>
T atomic_fetch_or_explicit(atomic<T>*, T, memory_order) noexcept;
template <class T>
T atomic_fetch_xor(volatile atomic<T>*, T) noexcept;
template <class T>
T atomic_fetch_xor(atomic<T>*, T) noexcept;
template <class T>
T atomic_fetch_xor_explicit(volatile atomic<T>*, T, memory_order) noexcept;
template <class T>
T atomic_fetch_xor_explicit(atomic<T>*, T, memory_order) noexcept;

#define _DEFINE_ATOMIC_FETCH_INTEGRAL(integral) \
  template<> \
  integral atomic_fetch_add(volatile atomic<integral> *, integral ) noexcept; \
  template<> \
  integral atomic_fetch_add(atomic<integral> *, integral ) noexcept; \
  template<> \
  integral atomic_fetch_add_explicit(volatile atomic<integral> *, integral , memory_order) noexcept; \
  template<> \
  integral atomic_fetch_add_explicit(atomic<integral> *, integral , memory_order) noexcept; \
  template<> \
  integral atomic_fetch_sub(volatile atomic<integral> *, integral ) noexcept; \
  template<> \
  integral atomic_fetch_sub(atomic<integral> *, integral ) noexcept; \
  template<> \
  integral atomic_fetch_sub_explicit(volatile atomic<integral> *, integral , memory_order) noexcept; \
  template<> \
  integral atomic_fetch_sub_explicit(atomic<integral> *, integral , memory_order) noexcept; \
  template<> \
  integral atomic_fetch_and(volatile atomic<integral> *, integral ) noexcept; \
  template<> \
  integral atomic_fetch_and(atomic<integral> *, integral ) noexcept; \
  template<> \
  integral atomic_fetch_and_explicit(volatile atomic<integral> *, integral , memory_order) noexcept; \
  template<> \
  integral atomic_fetch_and_explicit(atomic<integral> *, integral , memory_order) noexcept; \
  template<> \
  integral atomic_fetch_or(volatile atomic<integral> *, integral ) noexcept; \
  template<> \
  integral atomic_fetch_or(atomic<integral> *, integral ) noexcept; \
  template<> \
  integral atomic_fetch_or_explicit(volatile atomic<integral> *, integral , memory_order) noexcept; \
  template<> \
  integral atomic_fetch_or_explicit(atomic<integral> *, integral , memory_order) noexcept; \
  template<> \
  integral atomic_fetch_xor(volatile atomic<integral> *, integral ) noexcept; \
  template<> \
  integral atomic_fetch_xor(atomic<integral> *, integral ) noexcept; \
  template<> \
  integral atomic_fetch_xor_explicit(volatile atomic<integral> *, integral , memory_order) noexcept; \
  template<> \
  integral atomic_fetch_xor_explicit(atomic<integral> *, integral , memory_order) noexcept;

_DEFINE_ATOMIC_FETCH_INTEGRAL(bool)
_DEFINE_ATOMIC_FETCH_INTEGRAL(char)
_DEFINE_ATOMIC_FETCH_INTEGRAL(signed char)
_DEFINE_ATOMIC_FETCH_INTEGRAL(unsigned char)
_DEFINE_ATOMIC_FETCH_INTEGRAL(char16_t)
_DEFINE_ATOMIC_FETCH_INTEGRAL(char32_t)
_DEFINE_ATOMIC_FETCH_INTEGRAL(wchar_t)
_DEFINE_ATOMIC_FETCH_INTEGRAL(short)
_DEFINE_ATOMIC_FETCH_INTEGRAL(unsigned short)
_DEFINE_ATOMIC_FETCH_INTEGRAL(int)
_DEFINE_ATOMIC_FETCH_INTEGRAL(unsigned int)
_DEFINE_ATOMIC_FETCH_INTEGRAL(long)
_DEFINE_ATOMIC_FETCH_INTEGRAL(unsigned long)
_DEFINE_ATOMIC_FETCH_INTEGRAL(long long)
_DEFINE_ATOMIC_FETCH_INTEGRAL(unsigned long long)

#undef _DEFINE_ATOMIC_FETCH_INTEGRAL

template <class T>
T* atomic_fetch_add(volatile atomic<T*>*, ptrdiff_t) noexcept;
template <class T>
T* atomic_fetch_add(atomic<T*>*, ptrdiff_t) noexcept;
template <class T>
T* atomic_fetch_add_explicit(volatile atomic<T*>*, ptrdiff_t, memory_order) noexcept;
template <class T>
T* atomic_fetch_add_explicit(atomic<T*>*, ptrdiff_t, memory_order) noexcept;
template <class T>
T* atomic_fetch_sub(volatile atomic<T*>*, ptrdiff_t) noexcept;
template <class T>
T* atomic_fetch_sub(atomic<T*>*, ptrdiff_t) noexcept;
template <class T>
T* atomic_fetch_sub_explicit(volatile atomic<T*>*, ptrdiff_t, memory_order) noexcept;
template <class T>
T* atomic_fetch_sub_explicit(atomic<T*>*, ptrdiff_t, memory_order) noexcept;

typedef struct atomic_flag {
  bool test_and_set(memory_order = memory_order_seq_cst) volatile noexcept;
  bool test_and_set(memory_order = memory_order_seq_cst) noexcept;
  void clear(memory_order = memory_order_seq_cst) volatile noexcept;
  void clear(memory_order = memory_order_seq_cst) noexcept;
  atomic_flag() noexcept = default;
  atomic_flag(const atomic_flag&) = delete;
  atomic_flag& operator=(const atomic_flag&) = delete;
  atomic_flag& operator=(const atomic_flag&) volatile = delete;
} atomic_flag;

bool atomic_flag_test_and_set(volatile atomic_flag*) noexcept;
bool atomic_flag_test_and_set(atomic_flag*) noexcept;
bool atomic_flag_test_and_set_explicit(volatile atomic_flag*, memory_order) noexcept;
bool atomic_flag_test_and_set_explicit(atomic_flag*, memory_order) noexcept;
void atomic_flag_clear(volatile atomic_flag*) noexcept;
void atomic_flag_clear(atomic_flag*) noexcept;
void atomic_flag_clear_explicit(volatile atomic_flag*, memory_order) noexcept;
void atomic_flag_clear_explicit(atomic_flag*, memory_order) noexcept;

extern "C" void atomic_thread_fence(memory_order) noexcept;
extern "C" void atomic_signal_fence(memory_order) noexcept;


__QAC_END_NAMESPACE

#endif
