#ifndef __QAC_INCLUDE_thread__
#define __QAC_INCLUDE_thread__

// Some flags to control how closely the standard is followed
#include <qac_config.h>

#include <chrono>

__QAC_BEGIN_NAMESPACE

class thread {
public:
  class id;

  typedef class __qacpp_thread_native_handle * native_handle_type;

  thread() noexcept;

  template <class F, class ... Args>
  explicit thread(F&& f, Args&&... args);
  ~thread();
  thread(const thread&) = delete;
  thread(thread&&) noexcept;
  thread& operator=(const thread&) = delete;
  thread& operator=(thread&&) noexcept;

  // members:
  void swap(thread&) noexcept;
  bool joinable() const noexcept;
  void join();
  void detach();
  id get_id() const noexcept;
  native_handle_type native_handle();

  // static members:
  static unsigned hardware_concurrency() noexcept;
};

void swap(thread & x, thread & y) noexcept;

namespace this_thread {
  thread::id get_id() noexcept;

  void yield() noexcept;

  template <class Clock, class Duration>
  void sleep_until(const chrono::time_point<Clock, Duration>& abs_time);

  template <class Rep, class Period>
  void sleep_for(const chrono::duration<Rep, Period>& rel_time);
}

__QAC_END_NAMESPACE

#endif
