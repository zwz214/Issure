  // paulfitz Thu Jun  3 09:39:18 IST 1999

// BEGIN BLOCK prefix
// Updated by paul on Tue Jun  8 11:15:38 IST 1999
// Part of a simple implementation of the standard C++ library, as
// described in ISO/IEC 14882:1998(E)

#ifndef __QAC_INCLUDE_list__
#define __QAC_INCLUDE_list__

// Some flags to control how closely the standard is followed
#include <qac_config.h>

// END BLOCK prefix

#include <initializer_list>
#include <memory>
#include <type_traits>


__QAC_BEGIN_NAMESPACE

  template<class T>
  class __list_const_iterator;
  
  template<class T>
  class __list_iterator
  {
  public:
    typedef __list_iterator<T> list_iterator_type;
    
    __list_iterator() {}
    __list_iterator(const __list_iterator<T>& __i) {}
    __list_iterator & operator=(__list_iterator<T>) { return *this ; }

    typedef T value_type;
    typedef bidirectional_iterator_tag iterator_category;
    typedef iterator <iterator_category, T> __iterator;
    typedef typename __iterator::pointer pointer;
    typedef typename __iterator::reference reference;
    typedef typename __iterator::difference_type difference_type;
    typedef size_t size_type;

    // forward iterator requirements

    inline typename __iterator::reference
    operator*() const { return *(operator-> ()); }

    inline typename __iterator::pointer
    operator->() const { static typename __iterator::pointer * volatile r; return * r;  }

    inline list_iterator_type&
    operator++() { return *this; };

    inline list_iterator_type
    operator++(int) { return *this; }

    // bidirectional iterator requirements
    
    inline list_iterator_type&
    operator--() { return *this; }

    inline list_iterator_type
    operator--(int) { return *this; }

    // Make sure the comparison functions allow for implicit conversions
    friend bool operator== (__list_iterator<T>, __list_iterator<T>);
    friend bool operator!= (__list_iterator<T>, __list_iterator<T>);
  };

  template<typename T>
  class __list_const_iterator
  {
  public:
    typedef __list_const_iterator<T> list_iterator_type;
    
    __list_const_iterator() {}
    __list_const_iterator(const __list_const_iterator<T>& __i) {}
    __list_const_iterator & operator=(__list_const_iterator <T>) { return *this; }
    __list_const_iterator(__list_iterator <T>) {}

    typedef T value_type;
    typedef bidirectional_iterator_tag iterator_category;
    typedef iterator <iterator_category, const T> __iterator;
    typedef typename __iterator::pointer pointer;
    typedef typename __iterator::reference reference;
    typedef typename __iterator::difference_type difference_type;
    typedef size_t size_type;

    // forward iterator requirements

    inline typename __iterator::reference
    operator*() const { return *(operator-> ()); }

    inline typename __iterator::pointer
    operator->() const { static typename __iterator::pointer * volatile r; return * r;  }

    inline list_iterator_type&
    operator++() { return *this; }

    inline list_iterator_type
    operator++(int) { return *this; }

    // bidirectional iterator requirements
    
    inline list_iterator_type&
    operator--() { return *this; }

    inline list_iterator_type
    operator--(int) { return *this; }

    // Make sure the comparison functions allow for implicit conversions
    friend bool operator== (__list_const_iterator<T>, __list_const_iterator<T>);
    friend bool operator!= (__list_const_iterator<T>, __list_const_iterator<T>);
  };

  template <class T, class Allocator = allocator<T> >
  class list;

  template <class T, class Allocator>
    bool operator==(const list<T,Allocator>&  x , const list<T,Allocator>&  y );
  template <class T, class Allocator>
    bool operator< (const list<T,Allocator>&  x , const list<T,Allocator>&  y );
  template <class T, class Allocator>
    bool operator!=(const list<T,Allocator>&  x , const list<T,Allocator>&  y );
  template <class T, class Allocator>
    bool operator> (const list<T,Allocator>&  x , const list<T,Allocator>&  y );
  template <class T, class Allocator>
    bool operator>=(const list<T,Allocator>&  x , const list<T,Allocator>&  y );
  template <class T, class Allocator>
    bool operator<=(const list<T,Allocator>&  x , const list<T,Allocator>&  y );


  //  specialized algorithms:
  template <class T, class Allocator>
    void swap(list<T,Allocator>& x, list<T,Allocator>& y);

  
  template <class T, class Allocator >
  class list {
  public:
    //  types:
    typedef typename Allocator::reference         reference;
    typedef typename Allocator::const_reference   const_reference;


    typedef T value_type;
    typedef size_t                                size_type;
    typedef ptrdiff_t                             difference_type;

    typedef Allocator                             allocator_type;
    typedef typename Allocator::pointer           pointer;
    typedef typename Allocator::const_pointer     const_pointer;
    
    // HIT picked 4 types - see lib.container.requirements	
    typedef __list_iterator<value_type >                       iterator;
    typedef __list_const_iterator<value_type >                 const_iterator;
    typedef std::reverse_iterator<iterator>                    reverse_iterator;
    typedef std::reverse_iterator<const_iterator>              const_reverse_iterator;


    //  lib.list.cons construct/copy/destroy:
    list() : list(Allocator()) { }
    explicit list(const Allocator& a) { Allocator(a).allocate(0); }
    explicit list(size_type  n , const T&  value  = T(),
		  const Allocator& = Allocator()) { Allocator().allocate(0); }
    template <class InputIterator>
      list(InputIterator  first , InputIterator  last ,
	   const Allocator& = Allocator()) { Allocator().allocate(0); }
    list(const list<T,Allocator>&  x ) { Allocator().allocate(0); }
    list(initializer_list<T>, const Allocator& = Allocator());
   ~list() {}
    list<T,Allocator>& operator=(const list<T,Allocator>&  x ) { list(x).swap(*this); return *this; } 
    template <class InputIterator>
      void assign(InputIterator first, InputIterator last) { *this = list(first, last); }
    void assign(size_type n, const T& t) { *this = list(n, t); }
    allocator_type get_allocator() const { static allocator_type  * volatile r; return * r; }




    //  iterators:
    iterator               begin() { static iterator * volatile r; return * r;  }
    const_iterator         begin() const { static const_iterator * volatile r; return * r;  }
    const_iterator         cbegin() const { static const_iterator * volatile r; return * r;  }
    iterator               end()  { static iterator * volatile r; return * r;  }
    const_iterator         end() const { static const_iterator * volatile r; return * r;  }
    const_iterator         cend() const { static const_iterator * volatile r; return * r;  }
    reverse_iterator       rbegin()  { static reverse_iterator * volatile r; return * r;  }
    const_reverse_iterator rbegin() const { static const_reverse_iterator * volatile r; return * r;  }
    const_reverse_iterator crbegin() const { static const_reverse_iterator * volatile r; return * r;  }
    reverse_iterator       rend()  { static reverse_iterator * volatile r; return * r;  }
    const_reverse_iterator rend() const { static const_reverse_iterator * volatile r; return * r;  }
    const_reverse_iterator crend() const { static const_reverse_iterator * volatile r; return * r;  }




    //  lib.list.capacity capacity:
    bool      empty() const { static bool * volatile r; return * r;  } 
    size_type size() const { static size_type * volatile r; return * r;  }
    size_type max_size() const { static size_type * volatile r; return * r;  }
    void      resize(size_type sz, T c = T()) { insert (end(), c); erase (begin(), end()); }




    //  element access:
    reference       front()       { return *begin(); }
    const_reference front() const { return *begin(); }
    reference       back()        { return *rbegin(); }
    const_reference back() const  { return *rbegin(); }




    //  lib.list.modifiers modifiers:
    template <class... Args> void emplace_front(Args&&... args);
    void push_front(const T&  x ) { insert (begin(), x); }
    void push_front(T&&  x )      { insert (begin(), static_cast<T &&>(x)); }
    void pop_front()              { }
    template <class... Args> void emplace_back(Args&&... args);
    void push_back(const T&  x )  { insert (end(), x); }
    void push_back(T&&  x )       { insert (end(), static_cast<T &&>(x)); }
    void pop_back()               { }




    iterator insert(iterator  position , const T&  x )  { Allocator().allocate(0); T t(x); }
    iterator insert(iterator  position , T&&  x )  { Allocator().allocate(0); T t(static_cast<T &&>(x)); }
    void     insert(iterator  position , size_type  n , const T&  x )  { Allocator().allocate(0); T t(x); }
    template <class InputIterator>
      void insert(iterator  position , InputIterator  first ,
		  InputIterator  last )
    { __insert_range(position, first, last, typename std::is_integral<InputIterator>::type()); }



    iterator erase(iterator  position ) { }
    iterator erase(iterator  position , iterator  last ) {}
    void     swap(list<T,Allocator>&) { } 
    void     clear() { erase (begin(), end()); }




    //  lib.list.ops list operations:
    void splice(iterator  position , list<T,Allocator>&  x ) {}
    void splice(iterator  position , list<T,Allocator>&  x , iterator  i ) {}
    void splice(iterator  position , list<T,Allocator>&  x , iterator  first ,
		iterator  last ) {}




    void remove(const T&  value ) { *(iterator()) == value ; } 
    template <class Predicate> void remove_if(Predicate  pred ) { pred (*(iterator())) != false; } 




    void unique();
    template <class BinaryPredicate>
      void unique(BinaryPredicate  binary_pred );




    void merge(list<T,Allocator>&  x );
    template <class Compare> void merge(list<T,Allocator>&  x , Compare  comp );




    void sort();
    template <class Compare> void sort(Compare  comp );




    void reverse();


    template <class InputIterator>
    void __insert_range(iterator position, InputIterator n, InputIterator x, std::true_type)
    { Allocator().allocate(0); T t(x); }

    template <class InputIterator>
    void __insert_range(iterator position, InputIterator first, InputIterator last, std::false_type)
    { Allocator().allocate(0); T t(*first); }
  };


__QAC_END_NAMESPACE


// BEGIN BLOCK postfix
// Updated by paul on Tue Jun  8 11:15:38 IST 1999
#endif // ends __QAC_INCLUDE_list__
// END BLOCK postfix

