// paulfitz Thu Jun  3 09:39:19 IST 1999

// BEGIN BLOCK prefix
// Updated by paul on Tue Jun  8 11:15:39 IST 1999
// Part of a simple implementation of the standard C++ library, as
// described in ISO/IEC 14882:1998(E)

#ifndef __QAC_INCLUDE_streambuf__
#define __QAC_INCLUDE_streambuf__

// Some flags to control how closely the standard is followed
#include <qac_config.h>

// END BLOCK prefix

#include <ios>
#include <locale>  // only strictly need "class locale;"

__QAC_BEGIN_NAMESPACE


  template <class charT, class traits>
  class basic_streambuf {
  public:

    //  Types:
    typedef charT                     char_type;
    typedef typename traits::int_type int_type;
    typedef typename traits::pos_type pos_type;
    typedef typename traits::off_type off_type;
    typedef traits                    traits_type;

    virtual ~basic_streambuf();

    //  lib.streambuf.locales locales:
    locale   pubimbue(const locale &loc);
    locale   getloc() const;

    //  lib.streambuf.buffer buffer and positioning:
    basic_streambuf<char_type,traits>*
	     pubsetbuf(char_type* s, streamsize n);
    pos_type pubseekoff(off_type off, ios_base::seekdir way,
			ios_base::openmode which =
			    ios_base::in | ios_base::out);
    pos_type pubseekpos(pos_type sp,
			ios_base::openmode which =
			    ios_base::in | ios_base::out);
    int      pubsync();

    //  Get and put areas:
    //  lib.streambuf.pub.get Get area:
    streamsize in_avail();
    int_type snextc();
    int_type sbumpc();
    int_type sgetc();
    streamsize sgetn(char_type* s, streamsize  n);

    //  lib.streambuf.pub.pback Putback:
    int_type sputbackc(char_type c);
    int_type sungetc();

    //  lib.streambuf.pub.put Put area:
    int_type   sputc(char_type c);
    streamsize sputn(const char_type* s, streamsize  n);

  protected:
    basic_streambuf();

    //  lib.streambuf.get.area Get area:
    char_type* eback() const;
    char_type* gptr()  const;
    char_type* egptr() const;
    void       gbump(int n);
    void       setg(char_type* gbeg, char_type* gnext, char_type* gend);

    //  lib.streambuf.put.area Put area:
    char_type* pbase() const;
    char_type* pptr() const;
    char_type* epptr() const;
    void       pbump(int n);
    void       setp(char_type* pbeg, char_type* pend);

    //  lib.streambuf.virtuals virtual functions:
    //  lib.streambuf.virt.locales Locales:
    virtual void imbue(const locale &loc);

    //  lib.streambuf.virt.buffer Buffer management and positioning:
    virtual basic_streambuf<char_type,traits>*
		     setbuf(char_type* s, streamsize n);
    virtual pos_type seekoff(off_type off, ios_base::seekdir way,
	      ios_base::openmode which = ios_base::in | ios_base::out);
    virtual pos_type seekpos(pos_type sp,
	      ios_base::openmode which = ios_base::in | ios_base::out);
    virtual int      sync();

    //  lib.streambuf.virt.get Get area:
    virtual int        showmanyc();
    virtual streamsize xsgetn(char_type* s, streamsize n);
    virtual int_type   underflow();
    virtual int_type   uflow();

    //  lib.streambuf.virt.pback Putback:
    virtual int_type   pbackfail(int_type c = traits::eof());

    //  lib.streambuf.virt.put Put area:
    virtual streamsize xsputn(const char_type* s, streamsize n);
    virtual int_type   overflow (int_type c = traits::eof());
  };


__QAC_END_NAMESPACE

// BEGIN BLOCK postfix
// Updated by paul on Tue Jun  8 11:15:39 IST 1999
#endif // ends __QAC_INCLUDE_streambuf__
// END BLOCK postfix

