#ifndef __QAC_INCLUDE_tuple__
#define __QAC_INCLUDE_tuple__

// Some flags to control how closely the standard is followed
#include <qac_config.h>

#include <memory>
#include <type_traits>


__QAC_BEGIN_NAMESPACE

template <class T1, class T2>
struct pair;

// \ref{tuple.tuple}, class template \tcode{tuple}:
template <class... Types> class tuple;

// \ref{tuple.creation}, tuple creation functions:
const struct { } ignore;

template <class... Types>
tuple<Types...> make_tuple(Types&&...);

template <class... Types>
tuple<Types...> forward_as_tuple(Types&&...) noexcept;

template<class... Types>
tuple<Types&...> tie(Types&...) noexcept;

//template <class... Tuples>
//tuple<Ctypes...> tuple_cat(Tuples&&...);

// \ref{tuple.helper}, tuple helper classes:
template <class T> struct tuple_size;  // undefined
template <class T> struct tuple_size<const T>;
template <class T> struct tuple_size<volatile T>;
template <class T> struct  tuple_size<const volatile T>;

template <class... Types> struct tuple_size<tuple<Types...> >
  : public integral_constant<size_t, sizeof...(Types)>
{ };

template <size_t I, class T> struct tuple_element;    // undefined
template <size_t I, class T> struct tuple_element<I, const T>;
template <size_t I, class T> struct tuple_element<I, volatile T>;
template <size_t I, class T> struct tuple_element<I, const volatile T>;

template <size_t I, class Head, class... Types>
struct tuple_element<I, tuple<Head, Types...> >
  : public tuple_element<I - 1, tuple<Types...> >
{ };

template <class Head, class... Types>
struct tuple_element<0, tuple<Head, Types...> >
{
  typedef Head type;
};

// \ref{tuple.elem}, element access:
template <size_t I, class... Types>
typename tuple_element<I, tuple<Types...> >::type& get(tuple<Types...>&) noexcept;
template <size_t I, class... Types>
typename tuple_element<I, tuple<Types...> >::type&& get(tuple<Types...>&&) noexcept;
template <size_t I, class... Types>
typename tuple_element<I, tuple<Types...> >::type const& get(const tuple<Types...>&) noexcept;

// \ref{tuple.rel}, relational operators:
template<class... TTypes, class... UTypes>
bool operator==(const tuple<TTypes...>&, const tuple<UTypes...>&);
template<class... TTypes, class... UTypes>
bool operator<(const tuple<TTypes...>&, const tuple<UTypes...>&);
template<class... TTypes, class... UTypes>
bool operator!=(const tuple<TTypes...>&, const tuple<UTypes...>&);
template<class... TTypes, class... UTypes>
bool operator>(const tuple<TTypes...>&, const tuple<UTypes...>&);
template<class... TTypes, class... UTypes>
bool operator<=(const tuple<TTypes...>&, const tuple<UTypes...>&);
template<class... TTypes, class... UTypes>
bool operator>=(const tuple<TTypes...>&, const tuple<UTypes...>&);

// \ref{tuple.traits}, allocator-related traits
template <class... Types, class Alloc>
struct uses_allocator<tuple<Types...>, Alloc>;

// \ref{tuple.special}, specialized algorithms:
template <class... Types>
void swap(tuple<Types...>& x, tuple<Types...>& y);


template <class... Types>
class tuple  {
public:
  // \ref{tuple.cnstr}, \tcode{tuple} construction
  tuple();
  explicit tuple(const Types&...);
  template <class... UTypes>
  explicit tuple(UTypes&&...);

  tuple(const tuple&) = default;
  tuple(tuple&&) = default;

  template <class... UTypes>
  tuple(const tuple<UTypes...>&);
  template <class... UTypes>
  tuple(tuple<UTypes...>&&);

  template <class U1, class U2>
  tuple(const pair<U1, U2>&);       // iff \tcode{sizeof...(Types) == 2}
  template <class U1, class U2>
  tuple(pair<U1, U2>&&);            // iff \tcode{sizeof...(Types) == 2}

  // allocator-extended constructors
  template <class Alloc>
  tuple(allocator_arg_t, const Alloc& a);
  template <class Alloc>
  tuple(allocator_arg_t, const Alloc& a, const Types&...);
  template <class Alloc, class... UTypes>
  tuple(allocator_arg_t, const Alloc& a, UTypes&&...);
  template <class Alloc>
  tuple(allocator_arg_t, const Alloc& a, const tuple&);
  template <class Alloc>
  tuple(allocator_arg_t, const Alloc& a, tuple&&);
  template <class Alloc, class... UTypes>
  tuple(allocator_arg_t, const Alloc& a, const tuple<UTypes...>&);
  template <class Alloc, class... UTypes>
  tuple(allocator_arg_t, const Alloc& a, tuple<UTypes...>&&);
  template <class Alloc, class U1, class U2>
  tuple(allocator_arg_t, const Alloc& a, const pair<U1, U2>&);
  template <class Alloc, class U1, class U2>
  tuple(allocator_arg_t, const Alloc& a, pair<U1, U2>&&);

  // \ref{tuple.assign}, \tcode{tuple} assignment
  tuple& operator=(const tuple&);
  tuple& operator=(tuple&&);

  template <class... UTypes>
  tuple& operator=(const tuple<UTypes...>&);
  template <class... UTypes>
  tuple& operator=(tuple<UTypes...>&&);

  template <class U1, class U2>
  tuple& operator=(const pair<U1, U2>&);    // iff \tcode{sizeof...(Types) == 2}
  template <class U1, class U2>
  tuple& operator=(pair<U1, U2>&&);         // iff \tcode{sizeof...(Types) == 2}

  // \ref{tuple.swap}, \tcode{tuple} swap
  void swap(tuple&);
};

template <>
class tuple<> {
public:
  void swap(tuple &)
  { }
};

__QAC_END_NAMESPACE


#endif
