// paulfitz Thu Jun  3 09:39:18 IST 1999

// BEGIN BLOCK prefix
// Updated by paul on Tue Jun  8 11:15:36 IST 1999
// Part of a simple implementation of the standard C++ library, as
// described in ISO/IEC 14882:1998(E)

#ifndef __QAC_INCLUDE_bitset__
#define __QAC_INCLUDE_bitset__

// Some flags to control how closely the standard is followed
#include <qac_config.h>

// END BLOCK prefix

#include <cstddef>              //  for  size_t
#include <string>
#include <stdexcept>            //  for  invalid_argument,
				//     out_of_range,  overflow_error
#include <iosfwd>               //  for  istream,  ostream

__QAC_BEGIN_NAMESPACE

  //template <size_t N> class bitset;
  template<size_t N> class bitset {
  public:
    //  bit reference:
    class reference {
      friend class bitset<N>;
      reference();
    public:
     ~reference();
      reference& operator=(bool x);             //  for  b[i] = x;
      reference& operator=(const reference&);   //  for  b[i] = b[j];
      bool operator~() const;                   //  flips the bit
      operator bool() const;                    //  for  x = b[i];
      reference& flip();                        //  for  b[i].flip();
    };

    //  lib.bitset.cons constructors:
    bitset();
    bitset(unsigned long  val );
    template<class charT, class traits, class Allocator>
      explicit bitset(
	const basic_string<charT,traits,Allocator>&  str ,
	typename basic_string<charT,traits,Allocator>::size_type  pos  = 0,
	typename basic_string<charT,traits,Allocator>::size_type  n  =
	  (basic_string<charT,traits,Allocator>::npos) );
    //HIT added parantheses around basic_string<charT,traits,Allocator>::npos

    //  lib.bitset.members bitset operations:
    bitset<N>& operator&=(const bitset<N>&  rhs );
    bitset<N>& operator|=(const bitset<N>&  rhs );
    bitset<N>& operator^=(const bitset<N>&  rhs );
    bitset<N>& operator<<=(size_t  pos );
    bitset<N>& operator>>=(size_t  pos );
    bitset<N>& set();
    bitset<N>& set(size_t  pos , int  val  = true);
    bitset<N>& reset();
    bitset<N>& reset(size_t  pos );
    bitset<N>  operator~() const;
    bitset<N>& flip();
    bitset<N>& flip(size_t  pos );

    //  element access:
    reference operator[](size_t  pos );         //  for  b[i];

    unsigned long  to_ulong() const;
    template <class charT, class traits, class Allocator>
      basic_string<charT, traits, Allocator> to_string() const;
    size_t count() const;
    size_t size()  const;
    bool operator==(const bitset<N>&  rhs ) const;
    bool operator!=(const bitset<N>&  rhs ) const;
    bool test(size_t  pos ) const;
    bool any() const;
    bool none() const;
    bitset<N> operator<<(size_t  pos ) const;
    bitset<N> operator>>(size_t  pos ) const;
  };

  //  lib.bitset.operators bitset operations:
  template <size_t N>
    bitset<N> operator&(const bitset<N>&, const bitset<N>&);
  template <size_t N>
    bitset<N> operator|(const bitset<N>&, const bitset<N>&);
  template <size_t N>
    bitset<N> operator^(const bitset<N>&, const bitset<N>&);
  template <class charT, class traits, size_t N>
    basic_istream<charT, traits>&
    operator>>(basic_istream<charT, traits>&  is , bitset<N>&  x );
  template <class charT, class traits, size_t N>
    basic_ostream<charT, traits>&
    operator<<(basic_ostream<charT, traits>&  os , const bitset<N>&  x );

__QAC_END_NAMESPACE

// BEGIN BLOCK postfix
// Updated by paul on Tue Jun  8 11:15:36 IST 1999
#endif // ends __QAC_INCLUDE_bitset__
// END BLOCK postfix

