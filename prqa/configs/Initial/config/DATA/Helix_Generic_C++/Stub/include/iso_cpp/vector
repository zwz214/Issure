// paulfitz Thu Jun  3 09:39:19 IST 1999

// BEGIN BLOCK prefix
// Updated by paul on Tue Jun  8 11:15:40 IST 1999
// Part of a simple implementation of the standard C++ library, as
// described in ISO/IEC 14882:1998(E)

#ifndef __QAC_INCLUDE_vector__
#define __QAC_INCLUDE_vector__

// Some flags to control how closely the standard is followed
#include <qac_config.h>

// END BLOCK prefix

#include <qac_iterator.h>
#include <initializer_list>
#include <memory>
#include <iterator>
#include <type_traits>


__QAC_BEGIN_NAMESPACE


  template <class T, class Allocator = allocator<T> >
  class vector {
  public:
    //  types:
    typedef typename Allocator::reference         reference;
    typedef typename Allocator::const_reference   const_reference;

    typedef T value_type;
    // SPEC CHOICE -- picked 4 types - see lib.container.requirements	
    typedef __normal_iterator<value_type*, vector<T, Allocator> >
                                                  iterator;
    typedef __normal_iterator<const value_type*, vector<T, Allocator> >
                                                  const_iterator;
    typedef size_t                                size_type;
    typedef ptrdiff_t                             difference_type;

    typedef Allocator                             allocator_type;
    typedef typename Allocator::pointer           pointer;
    // SPEC TYPO (assumed) -- added semicolon
    typedef typename Allocator::const_pointer     const_pointer;
    typedef std::reverse_iterator<iterator>       reverse_iterator;
    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;

    //  lib.vector.cons construct/copy/destroy:
    vector() : vector(Allocator())                                { }
    explicit vector(const Allocator& a)                           { Allocator(a).allocate (sizeof(T)); }
    explicit vector(size_type n, const Allocator& = Allocator())  { T t; Allocator().allocate (sizeof(t)); }
    vector(size_type n, const T& value,
        const Allocator& = Allocator())                           { assign (n, value); }
    template <class InputIterator>
    vector(InputIterator first, InputIterator last,
        const Allocator& = Allocator())                           { assign (first, last); }
    vector(const vector<T,Allocator>& x)                          { assign (x.begin(), x.end ()); }
    vector(initializer_list<T>, const Allocator& = Allocator());
   ~vector()                                                      { T * t; Allocator().deallocate (t, sizeof(T));  }
    vector<T,Allocator>& operator=(const vector<T,Allocator>& x)  { assign (x.begin(), x.end ()); return *this; }
    template <class InputIterator>
    void assign(InputIterator first, InputIterator last);
    // unable to provide an easy definition because of LWG 438

    void assign(size_type n, const T& u)                          { T t2(u); Allocator().allocate (sizeof(t2)); }
    allocator_type get_allocator() const                          { static allocator_type  * volatile r; return * r; }

    //  iterators:
    iterator               begin()                                { static iterator * volatile r; return * r;  }
    const_iterator         begin() const                          { static const_iterator * volatile r; return * r;  }
    const_iterator         cbegin() const                         { static const_iterator * volatile r; return * r;  }
    iterator               end()                                  { static iterator * volatile r; return * r;  }
    const_iterator         end() const                            { static const_iterator * volatile r; return * r;  }
    const_iterator         cend() const                           { static const_iterator * volatile r; return * r;  }
    reverse_iterator       rbegin()                               { static reverse_iterator * volatile r; return * r;  }
    const_reverse_iterator rbegin() const                         { static const_reverse_iterator * volatile r; return * r;  }
    const_reverse_iterator crbegin() const                        { static const_reverse_iterator * volatile r; return * r;  }
    reverse_iterator       rend()                                 { static reverse_iterator * volatile r; return * r;  }
    const_reverse_iterator rend() const                           { static const_reverse_iterator * volatile r; return * r;  }
    const_reverse_iterator crend() const                          { static const_reverse_iterator * volatile r; return * r;  }

    //  lib.vector.capacity capacity:
    size_type size() const { static size_type * volatile r; return * r;  }
    size_type max_size() const { static size_type * volatile r; return * r;  }
    void      resize(size_type sz, T c = T()) { insert (end(), c); erase (begin(), end()); }
    size_type capacity() const { static size_type * volatile r; return * r;  }
    bool      empty() const { static bool * volatile r; return * r; }
    void      reserve(size_type n) { Allocator ().allocate (n * sizeof(T)); }

    //  element access:
    reference       operator[](size_type n)        { return at(n); }
    const_reference operator[](size_type n) const  { return at(n); }
    const_reference at(size_type n) const          { const_iterator i = begin(); advance(i, n); return *i; }
    reference       at(size_type n)                { iterator i = begin(); advance(i, n); return *i; }
    reference       front()                        { return *begin(); }
    const_reference front() const                  { return *begin(); }
    reference       back()                         { return at(size()-1); }
    const_reference back() const                   { return at(size()-1); }

    T* data() noexcept                             { return &front(); }
    const T* data() const noexcept                 { return &front(); }

    //  lib.vector.modifiers modifiers:
    template <class... Args> void emplace_back(Args&&... args);
    void push_back(const T& x)                                   { insert(end(), x); }
    void push_back(T&& x)                                        { insert(end(), static_cast<T &&>(x)); }
    void pop_back()                                              { }

    template <class... Args> iterator emplace(const_iterator position, Args&&... args);
    iterator insert(iterator position, const T& x)               { Allocator().allocate(0); T t(x); return begin (); }
    iterator insert(iterator position, T&& x)                    { Allocator().allocate(0); T t(static_cast<T&&>(x)); return begin (); }
    void     insert(iterator position, size_type n, const T& x)  { Allocator().allocate(0); T t(x); }
    template <class InputIterator>
	void insert(iterator position,
		    InputIterator first, InputIterator last)
    { __insert_range(position, first, last, typename std::is_integral<InputIterator>::type()); }
    iterator erase(iterator position)                            { return begin (); }
    iterator erase(iterator first, iterator last)                { return begin (); }
    void     swap(vector<T,Allocator>&)                          { }
    void     clear()                                             { erase (begin(), end ()); } 

    template <class InputIterator>
    void __insert_range(iterator position, InputIterator n, InputIterator x, std::true_type)
    { Allocator().allocate(0); T t(x); }

    template <class InputIterator>
    void __insert_range(iterator position, InputIterator first, InputIterator last, std::false_type)
    { Allocator().allocate(0); T t(*first); }
  };


  template <class T, class Allocator>
    bool operator==(const vector<T,Allocator>& x,
		    const vector<T,Allocator>& y);
  template <class T, class Allocator>
    bool operator< (const vector<T,Allocator>& x,
		    const vector<T,Allocator>& y);
  template <class T, class Allocator>
    bool operator!=(const vector<T,Allocator>& x,
		    const vector<T,Allocator>& y);
  template <class T, class Allocator>
    bool operator> (const vector<T,Allocator>& x,
		    const vector<T,Allocator>& y);
  template <class T, class Allocator>
    bool operator>=(const vector<T,Allocator>& x,
		    const vector<T,Allocator>& y);
  template <class T, class Allocator>
    bool operator<=(const vector<T,Allocator>& x,
		    const vector<T,Allocator>& y);

  //  specialized algorithms:
  template <class T, class Allocator>
    void swap(vector<T,Allocator>& x, vector<T,Allocator>& y) { x.swap (y); }



  template <class Allocator> class vector<bool, Allocator> {
  public:
    // SPEC NOTES -- "reference" is absent
    typedef bool                                  const_reference;
    typedef bool                                  value_type;
    typedef Allocator                             allocator_type;

    // SPEC CHOICE -- picked 4 types - see lib.container.requirements	
    typedef __normal_iterator<value_type*, vector<bool, Allocator> >
                                                  iterator;
    typedef __normal_iterator<const value_type*, vector<bool, Allocator> >
                                                  const_iterator;
    typedef size_t                                size_type;
    typedef ptrdiff_t                             difference_type;

    // SPEC CHOICE -- picked 2 types
    typedef typename Allocator::pointer           pointer;
    typedef typename Allocator::const_pointer     const_pointer;

    typedef std::reverse_iterator<iterator>       reverse_iterator;
    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;

    //  bit reference:
    class reference {
     friend class vector<bool, Allocator>;
     reference();
    public:
     ~reference();
      operator bool() const;
      reference& operator=(const bool x);
      reference& operator=(const reference& x);
      void flip();              //  flips the bit
    };

    //  construct/copy/destroy:
    explicit vector(const Allocator& = Allocator());
    explicit vector(size_type n, const bool& value = bool(),
		    const Allocator& = Allocator());
    template <class InputIterator>
      vector(InputIterator first, InputIterator last,
	const Allocator& = Allocator());
    vector(const vector<bool,Allocator>& x);
   ~vector();
    vector<bool,Allocator>& operator=(const vector<bool,Allocator>& x);
    template <class InputIterator>
      void assign(InputIterator first, InputIterator last);

    // SPEC MOD -- possible typo?  Not sure about this, but fix seems necessary
    //    void assign(size_type n, const T& t);
    void assign(size_type n, const bool& t);
    allocator_type get_allocator() const;

    //  iterators:
    iterator               begin();
    const_iterator         begin() const;
    iterator               end();
    const_iterator         end() const;
    reverse_iterator       rbegin();
    const_reverse_iterator rbegin() const;
    reverse_iterator       rend();
    const_reverse_iterator rend() const;

    //  capacity:
    size_type size() const;
    size_type max_size() const;
    void      resize(size_type sz, bool c = false);
    size_type capacity() const;
    bool      empty() const;
    void      reserve(size_type n);

    //  element access:
    reference       operator[](size_type n);
    const_reference operator[](size_type n) const;
    const_reference at(size_type n) const;
    reference       at(size_type n);
    reference       front();
    const_reference front() const;
    reference       back();
    const_reference back() const;

    //  modifiers:
    void push_back(const bool& x);
    void pop_back();
    iterator insert(iterator position, const bool& x);
    void     insert (iterator position, size_type n, const bool& x);
    template <class InputIterator>
	void insert(iterator position,
		    InputIterator first, InputIterator last);

    iterator erase(iterator position);
    iterator erase(iterator first, iterator last);
    void swap(vector<bool,Allocator>&);
    static void swap(reference x, reference y);
    void flip();                //  flips all bits
    void clear();
  };


  template <class Allocator>
    bool operator==(const vector<bool,Allocator>& x,
		    const vector<bool,Allocator>& y);
  template <class Allocator>
    bool operator< (const vector<bool,Allocator>& x,
		    const vector<bool,Allocator>& y);
  template <class Allocator>
    bool operator!=(const vector<bool,Allocator>& x,
		    const vector<bool,Allocator>& y);
  template <class Allocator>
    bool operator> (const vector<bool,Allocator>& x,
		    const vector<bool,Allocator>& y);
  template <class Allocator>
    bool operator>=(const vector<bool,Allocator>& x,
		    const vector<bool,Allocator>& y);
  template <class Allocator>
    bool operator<=(const vector<bool,Allocator>& x,
		    const vector<bool,Allocator>& y);

  //  specialized algorithms:
  template <class Allocator>
    void swap(vector<bool,Allocator>& x, vector<bool,Allocator>& y);


__QAC_END_NAMESPACE


// BEGIN BLOCK postfix
// Updated by paul on Tue Jun  8 11:15:40 IST 1999
#endif // ends __QAC_INCLUDE_vector__
// END BLOCK postfix

