// paulfitz Thu Jun  3 09:39:18 IST 1999

// BEGIN BLOCK prefix
// Updated by paul on Tue Jun  8 11:15:36 IST 1999
// Part of a simple implementation of the standard C++ library, as
// described in ISO/IEC 14882:1998(E)

#ifndef __QAC_INCLUDE_deque__
#define __QAC_INCLUDE_deque__

// Some flags to control how closely the standard is followed
#include <qac_config.h>

// END BLOCK prefix

#include <qac_iterator.h>
#include <initializer_list>
#include <memory>
#include <type_traits>

__QAC_BEGIN_NAMESPACE

  template <class T, class Allocator = allocator<T> >
  class deque {
  public:
    //  types:
    typedef typename Allocator::reference         reference;
    typedef typename Allocator::const_reference   const_reference;

    typedef T value_type;
    // SPEC CHOICE -- picked 4 types - see lib.container.requirements	
    typedef __normal_iterator<value_type*, deque<T, Allocator> >
                                                  iterator;
    typedef __normal_iterator<const value_type*, deque<T, Allocator> >
                                                  const_iterator;
    typedef size_t                                size_type;
    typedef ptrdiff_t                             difference_type;

    typedef Allocator                             allocator_type;
    typedef typename Allocator::pointer           pointer;
    typedef typename Allocator::const_pointer     const_pointer;
    typedef std::reverse_iterator<iterator>       reverse_iterator;
    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;

    //  lib.deque.cons construct/copy/destroy:
    deque() : deque(Allocator())                                 { }
    explicit deque(const Allocator& a)                           { Allocator(a).allocate (sizeof(T)); }
    explicit deque(size_type n, const T& value = T(),
	const Allocator& = Allocator())                          { assign (n, T()); }
    template <class InputIterator>
      deque(InputIterator first, InputIterator last,
	    const Allocator& = Allocator())                      { assign (first, last); }
    deque(const deque<T,Allocator>& x)                           { assign (x.begin(), x.end ()); }
    deque(initializer_list<T>, const Allocator& = Allocator());
   ~deque()                                                      { T * t; Allocator().deallocate (t, sizeof(T));  }
    deque<T,Allocator>& operator=(const deque<T,Allocator>& x)   { assign (x.begin(), x.end ()); return *this; }
    template <class InputIterator>
      void assign(InputIterator first, InputIterator last)       { T t2(*first); Allocator().allocate (sizeof(t2)); }
    void assign(size_type n, const T& t)                         { T t2(t); Allocator().allocate (sizeof(t2)); }
    allocator_type get_allocator() const                         { static allocator_type  * volatile r; return * r; }

    //  iterators:
    iterator               begin()                               { static iterator * volatile r; return * r;  }
    const_iterator         begin() const                         { static const_iterator * volatile r; return * r;  }
    const_iterator         cbegin() const                        { static const_iterator * volatile r; return * r;  }
    iterator               end()                                 { static iterator * volatile r; return * r;  }
    const_iterator         end() const                           { static const_iterator * volatile r; return * r;  }
    const_iterator         cend() const                          { static const_iterator * volatile r; return * r;  }
    reverse_iterator       rbegin()                              { static reverse_iterator * volatile r; return * r;  }
    const_reverse_iterator rbegin() const                        { static const_reverse_iterator * volatile r; return * r;  }
    const_reverse_iterator crbegin() const                       { static const_reverse_iterator * volatile r; return * r;  }
    reverse_iterator       rend()                                { static reverse_iterator * volatile r; return * r;  }
    const_reverse_iterator rend() const                          { static const_reverse_iterator * volatile r; return * r;  }
    const_reverse_iterator crend() const                         { static const_reverse_iterator * volatile r; return * r;  }

    //  lib.deque.capacity capacity:
    size_type size() const                                       { static size_type * volatile r; return * r;  }
    size_type max_size() const                                   { static size_type * volatile r; return * r;  }
    void      resize(size_type sz, T c = T())                    { insert (end(), c); erase (begin(), end()); }
    bool      empty() const                                      { static bool * volatile r; return * r;  }

    //  element access:
    reference       operator[](size_type n)                      { return at(n); }
    const_reference operator[](size_type n) const                { return at(n); }
    reference       at(size_type n)                              { iterator i = begin(); advance(i, n); return *i; }
    const_reference at(size_type n) const                        { const_iterator i = begin(); advance(i, n); return *i; }
    reference       front()                                      { return *begin(); }
    const_reference front() const                                { return *begin(); }
    reference       back()                                       { return at(size()-1); }
    const_reference back() const                                 { return at(size()-1); }

    //  lib.deque.modifiers modifiers:
    void push_front(const T& x)                                  { insert (begin(), x); }
    void push_front(T&& x)                                       { insert (begin(), static_cast<T&&>(x)); }
    void push_back(const T& x)                                   { insert (end(), x); }
    void push_back(T&& x)                                        { insert (end(), static_cast<T&&>(x)); }

    iterator insert(iterator position, const T& x)               { Allocator().allocate(0); T t(x); }
    iterator insert(iterator position, T&& x)                    { Allocator().allocate(0); T t(static_cast<T&&>(x)); }
    void     insert(iterator position, size_type n, const T& x)  { Allocator().allocate(0); T t(x); }
    template <class InputIterator>
      void insert (iterator position,
		   InputIterator first, InputIterator last)
    { __insert_range(position, first, last, typename std::is_integral<InputIterator>::type()); }

    void pop_front()                                             { } 
    void pop_back()                                              { }

    iterator erase(iterator position)                            { } 
    iterator erase(iterator first, iterator last)                { } 
    void     swap(deque<T,Allocator>&)                           { }
    void     clear()                                             { }

    template <class InputIterator>
    void __insert_range(iterator position, InputIterator n, InputIterator x, std::true_type)
    { Allocator().allocate(0); T t(x); }

    template <class InputIterator>
    void __insert_range(iterator position, InputIterator first, InputIterator last, std::false_type)
    { Allocator().allocate(0); T t(*first); }
  };


  template <class T, class Allocator>
    bool operator==(const deque<T,Allocator>& x,
		    const deque<T,Allocator>& y);
  template <class T, class Allocator>
    bool operator< (const deque<T,Allocator>& x,
		    const deque<T,Allocator>& y);
  template <class T, class Allocator>
    bool operator!=(const deque<T,Allocator>& x,
		    const deque<T,Allocator>& y);
  template <class T, class Allocator>
    bool operator> (const deque<T,Allocator>& x,
		    const deque<T,Allocator>& y);
  template <class T, class Allocator>
    bool operator>=(const deque<T,Allocator>& x,
		    const deque<T,Allocator>& y);
  template <class T, class Allocator>
    bool operator<=(const deque<T,Allocator>& x,
		    const deque<T,Allocator>& y);

  //  specialized algorithms:
  template <class T, class Allocator>
    void swap(deque<T,Allocator>& x, deque<T,Allocator>& y);



__QAC_END_NAMESPACE


// BEGIN BLOCK postfix
// Updated by paul on Tue Jun  8 11:15:36 IST 1999
#endif // ends __QAC_INCLUDE_deque__
// END BLOCK postfix

