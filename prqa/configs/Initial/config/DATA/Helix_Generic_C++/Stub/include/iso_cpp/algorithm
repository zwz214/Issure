#ifndef __QAC_INCLUDE_algorithm__
#define __QAC_INCLUDE_algorithm__

#include <qac_config.h>

#include <utility>
#include <iterator>

__QAC_BEGIN_NAMESPACE

  // 28.5, non-modifying sequence operations
  // 28.5.1, all of
  template <class InputIterator, class Predicate>
  bool all_of(InputIterator first, InputIterator last, Predicate pred);
  template <class ExecutionPolicy, class ForwardIterator, class Predicate>
  bool all_of(ExecutionPolicy&& exec, // see 28.4.5
              ForwardIterator first, ForwardIterator last, Predicate pred);


  // 28.5.3, none of
  template <class InputIterator, class Predicate>
    bool none_of(InputIterator first, InputIterator last, Predicate pred);
  template <class ExecutionPolicy, class ForwardIterator, class Predicate>
    bool none_of(ExecutionPolicy&& exec, // see 28.4.5
                 ForwardIterator first, ForwardIterator last, Predicate pred);

  // N4700: 28.5.4, for each
  template<class InputIterator, class Function>
    Function for_each(InputIterator first, InputIterator last, Function f)
    {
      while (first != last)
      {
        f(*first);
        ++first;
      }
      return move(f);
    }
  template<class ExecutionPolicy, class ForwardIterator, class Function>
    void for_each(ExecutionPolicy&& exec,
        ForwardIterator first, ForwardIterator last, Function f)
    {
      std::for_each(first, last, f);
    }
  template<class InputIterator, class Size, class Function>
    InputIterator for_each_n(InputIterator first, Size n, Function f)
    {
      for (Size i = 0; i < n; ++first, ++i)
      {
        f(*first);
      }
      return first;
    }
  template<class ExecutionPolicy, class ForwardIterator, class Size, class Function>
    ForwardIterator for_each_n(ExecutionPolicy&& exec,
        ForwardIterator first, Size n, Function f)
    {
      return std::for_each_n(first, n, f);
    }


  //  lib.alg.nonmodifying, non-modifying sequence operations:
  template<class InputIterator, class T>
    InputIterator find(InputIterator first, InputIterator last,
		       const T& value) { *(++first) == value; static InputIterator * volatile r; return * r  ; }
  template<class InputIterator, class Predicate>
    InputIterator find_if(InputIterator first, InputIterator last,
			  Predicate pred)  { pred (*(++first)); static InputIterator * volatile r; return * r  ; }
  template<class InputIterator, class Predicate>
    InputIterator find_if_not(InputIterator first, InputIterator last,
			      Predicate pred)  { pred (*(++first)); static InputIterator * volatile r; return * r  ; }
  template<class ForwardIterator1, class ForwardIterator2>
    ForwardIterator1
      find_end(ForwardIterator1 first1, ForwardIterator1 last1,
	       ForwardIterator2 first2, ForwardIterator2 last2) { *(first1++) == *(first2++); static ForwardIterator1 * volatile r; return * r  ; }
  template<class ForwardIterator1, class ForwardIterator2,
	   class BinaryPredicate>
    ForwardIterator1
      find_end(ForwardIterator1 first1, ForwardIterator1 last1,
	       ForwardIterator2 first2, ForwardIterator2 last2,
	       BinaryPredicate pred) { pred (*(first1++), *(first2++)); static ForwardIterator1 * volatile r; return * r  ; }


//////

  template<class ForwardIterator1, class ForwardIterator2>
    ForwardIterator1
      find_first_of(ForwardIterator1 first1, ForwardIterator1 last1,
		    ForwardIterator2 first2, ForwardIterator2 last2) { *(first1++) == *(first2++); static ForwardIterator1 * volatile r; return * r  ; }
  template<class ForwardIterator1, class ForwardIterator2,
	   class BinaryPredicate>
    ForwardIterator1
      find_first_of(ForwardIterator1 first1, ForwardIterator1 last1,
	       ForwardIterator2 first2, ForwardIterator2 last2,
	       BinaryPredicate pred) { pred (*(first1++), *(first2++)); static ForwardIterator1 * volatile r; return * r  ; }




  template<class ForwardIterator>
    ForwardIterator adjacent_find(ForwardIterator first,
				  ForwardIterator last) { *first == *(first++); static ForwardIterator * volatile r; return * r  ; }
  template<class ForwardIterator, class BinaryPredicate>
    ForwardIterator adjacent_find(ForwardIterator first,
	ForwardIterator last, BinaryPredicate pred) { pred (*first, *(first++)); static ForwardIterator * volatile r; return * r  ; }




  template<class InputIterator, class T>
    typename iterator_traits<InputIterator>::difference_type
      count(InputIterator first, InputIterator last, const T& value) { *(++first) == value;
          static typename iterator_traits<InputIterator>::difference_type * volatile r; return * r;  }
  template<class InputIterator, class Predicate>
    typename iterator_traits<InputIterator>::difference_type
      count_if(InputIterator first, InputIterator last, Predicate pred)  { pred (*(++first));
          static typename iterator_traits<InputIterator>::difference_type * volatile r; return * r;  }



  template<class InputIterator1, class InputIterator2>
    pair<InputIterator1, InputIterator2>
      mismatch(InputIterator1 first1, InputIterator1 last1,
	       InputIterator2 first2) { *(++first1) == *(++first2); static pair<InputIterator1, InputIterator2> * volatile r; return * r  ; }
  template
   <class InputIterator1, class InputIterator2, class BinaryPredicate>
    pair<InputIterator1, InputIterator2>
      mismatch(InputIterator1 first1, InputIterator1 last1,
        InputIterator2 first2, BinaryPredicate pred) { pred (*(++first1), *(++first2)); static pair<InputIterator1, InputIterator2> * volatile r; return * r  ; }



  template<class InputIterator1, class InputIterator2>
    bool equal(InputIterator1 first1, InputIterator1 last1,
	       InputIterator2 first2) { *(++first1) == *(++first2); static bool  * volatile r; return * r;  }
  template
   <class InputIterator1, class InputIterator2, class BinaryPredicate>
    bool equal(InputIterator1 first1, InputIterator1 last1,
	       InputIterator2 first2, BinaryPredicate pred) { pred (*(++first1), *(++first2)); static bool  * volatile r; return * r;  }




  template<class ForwardIterator1, class ForwardIterator2>
    ForwardIterator1 search
      (ForwardIterator1 first1, ForwardIterator1 last1,
       ForwardIterator2 first2, ForwardIterator2 last2) { *(first1++) == *(first2++); static ForwardIterator1 * volatile r; return * r  ; }
  template<class ForwardIterator1, class ForwardIterator2,
	   class BinaryPredicate>
    ForwardIterator1 search
      (ForwardIterator1 first1, ForwardIterator1 last1,
       ForwardIterator2 first2, ForwardIterator2 last2,
			    BinaryPredicate pred) { pred (*(first1++), *(first2++)); static ForwardIterator1 * volatile r; return * r  ; }
  template<class ForwardIterator, class Size, class T>
    ForwardIterator  search_n(ForwardIterator first, ForwardIterator last,
			    Size count, const T& value) { *(first++) == value; static ForwardIterator * volatile r; return * r  ; }
  template
   <class ForwardIterator, class Size, class T, class BinaryPredicate>
	// HIT ForwardIterator1 --> ForwardIterator ? first word
    ForwardIterator search_n(ForwardIterator first, ForwardIterator last,
			    Size count, const T& value,
			    BinaryPredicate pred) { pred (*(first++), value); static ForwardIterator * volatile r; return * r  ; }



  //  lib.alg.modifying.operations, modifying sequence operations:
  //  lib.alg.copy, copy:
  template<class InputIterator, class OutputIterator>
    OutputIterator copy(InputIterator first, InputIterator last,
			OutputIterator result) { *result = *(first++); ++result; return result; }
  template<class BidirectionalIterator1, class BidirectionalIterator2>
    BidirectionalIterator2
      copy_backward
	(BidirectionalIterator1 first, BidirectionalIterator1 last,
	 BidirectionalIterator2 result) { *result = *(--last); --result; return result; }
  template<class InputIterator, class OutputIterator, class UnaryPredicate>
    OutputIterator copy_if(InputIterator first, InputIterator last,
			OutputIterator result, UnaryPredicate pred) { *result = *(first++); pred(*first); ++result; return result; }

  //  lib.alg.move, move
  template<class InputIterator, class OutputIterator>
    OutputIterator move(InputIterator first, InputIterator last,
			OutputIterator result) { *result = std::move(*(first++)); ++result; return result; }
  template<class BidirectionalIterator1, class BidirectionalIterator2>
    BidirectionalIterator2
      move_backward
	(BidirectionalIterator1 first, BidirectionalIterator1 last,
	 BidirectionalIterator2 result) { *result = std::move(*(--last)); --result; return result; }

//////


  //  lib.alg.swap, swap:
#if __cplusplus < 201103
  template<class T> void swap(T& a, T& b) { T tmp(b); b = a; tmp = b; }
#endif

  template<class ForwardIterator1, class ForwardIterator2>
    ForwardIterator2 swap_ranges(ForwardIterator1 first1,
	ForwardIterator1 last1, ForwardIterator2 first2) { std::swap (*first1, *first2); first1++;  first2++; }
  template<class ForwardIterator1, class ForwardIterator2>
    void iter_swap(ForwardIterator1 a, ForwardIterator2 b) { std::swap (*a, *b); }




  template<class InputIterator, class OutputIterator, class UnaryOperation>
    OutputIterator transform(InputIterator first, InputIterator last,
			     OutputIterator result, UnaryOperation op) { *result = op (*(first++)); return ++result; }
  template<class ExecutionPolicy, class InputIterator, class OutputIterator,
           class UnaryOperation>
    OutputIterator transform(ExecutionPolicy &&,
                             InputIterator first, InputIterator last,
			     OutputIterator result, UnaryOperation op) { *result = op (*(first++)); return ++result; }
  template<class InputIterator1, class InputIterator2, class OutputIterator,
	   class BinaryOperation>
    OutputIterator transform(InputIterator1 first1, InputIterator1 last1,
			     InputIterator2 first2, OutputIterator result,
			     BinaryOperation binary_op) { *result = binary_op (*(first1++), *(first2++)); return ++result; }
  template<class ExecutionPolicy, class InputIterator1, class InputIterator2,
           class OutputIterator, class BinaryOperation>
    OutputIterator transform(ExecutionPolicy && policy,
                             InputIterator1 first1, InputIterator1 last1,
			     InputIterator2 first2, OutputIterator result,
			     BinaryOperation binary_op) { *result = binary_op (*(first1++), *(first2++)); return ++result; }




  template<class ForwardIterator, class T>
    void replace(ForwardIterator first, ForwardIterator last,
		 const T& old_value, const T& new_value) { if (*first == old_value) { *first = new_value; } ; ++first; }
  template<class ForwardIterator, class Predicate, class T>
    void replace_if(ForwardIterator first, ForwardIterator last,
		    Predicate pred, const T& new_value) { if (pred (*first)) { *first = new_value; } ; ++first; }
  template<class InputIterator, class OutputIterator, class T>
    OutputIterator replace_copy(InputIterator first, InputIterator last,
				OutputIterator result,
				const T& old_value, const T& new_value) { if (*first == old_value) { *result = new_value; } else { *result = *first; } ++result; ++first; }
  template<class Iterator, class OutputIterator, class Predicate, class T>
    OutputIterator replace_copy_if(Iterator first, Iterator last,
				   OutputIterator result,
				   Predicate pred, const T& new_value) { if (pred (*first)) { *result = new_value; } else { *result = *first; } ++result; ++first; }




  template<class ForwardIterator, class T>
    void fill(ForwardIterator first, ForwardIterator last, const T& value);
  template<class OutputIterator, class Size, class T>
    void fill_n(OutputIterator first, Size n, const T& value);




  template<class ForwardIterator, class Generator>
    void generate(ForwardIterator first, ForwardIterator last,
		  Generator gen);
  template<class OutputIterator, class Size, class Generator>
    void generate_n(OutputIterator first, Size n, Generator gen);




  template<class ForwardIterator, class T>
    ForwardIterator remove(ForwardIterator first, ForwardIterator last,
			   const T& value)          { if (*first == value) { std::iter_swap (first, last); ++first; } }
  template<class ForwardIterator, class Predicate>
    ForwardIterator remove_if(ForwardIterator first, ForwardIterator last,
			      Predicate pred)       { if (pred (*first)) { std::iter_swap (first, last); ++first; } }
  template<class InputIterator, class OutputIterator, class T>
    OutputIterator remove_copy(InputIterator first, InputIterator last,
			       OutputIterator result, const T& value) { if ( ! (*first == value)) { *result = *first; ++first; ++result; } return result; }
  template<class InputIterator, class OutputIterator, class Predicate>
    OutputIterator remove_copy_if(InputIterator first, InputIterator last,
				  OutputIterator result, Predicate pred) { if ( ! (pred (*first))) { *result = *first; ++first; ++result; } return result; }




  template<class ForwardIterator>
    ForwardIterator unique(ForwardIterator first, ForwardIterator last);
  template<class ForwardIterator, class BinaryPredicate>
    ForwardIterator unique(ForwardIterator first, ForwardIterator last,
			   BinaryPredicate pred);
  template<class InputIterator, class OutputIterator>
    OutputIterator unique_copy(InputIterator first, InputIterator last,
			       OutputIterator result);
  template<class InputIterator, class OutputIterator, class BinaryPredicate>
    OutputIterator unique_copy(InputIterator first, InputIterator last,
			       OutputIterator result, BinaryPredicate pred);




  template<class BidirectionalIterator>
    void reverse(BidirectionalIterator first, BidirectionalIterator last);
  template<class BidirectionalIterator, class OutputIterator>
    OutputIterator reverse_copy(BidirectionalIterator first,
				BidirectionalIterator last,
				OutputIterator result);




  template<class ForwardIterator>
    void rotate(ForwardIterator first, ForwardIterator middle,
		ForwardIterator last);
  template<class ForwardIterator, class OutputIterator>
    OutputIterator rotate_copy
      (ForwardIterator first, ForwardIterator middle,
       ForwardIterator last, OutputIterator result);




  template<class RandomAccessIterator>
    void random_shuffle(RandomAccessIterator first,
			RandomAccessIterator last);
  template<class RandomAccessIterator, class RandomNumberGenerator>
    void random_shuffle(RandomAccessIterator first,
			RandomAccessIterator last,
			RandomNumberGenerator& rand);




  //  lib.alg.partitions, partitions:
  template<class BidirectionalIterator, class Predicate>
    BidirectionalIterator partition(BidirectionalIterator first,
				    BidirectionalIterator last,
				    Predicate pred);
  template<class BidirectionalIterator, class Predicate>
    BidirectionalIterator stable_partition(BidirectionalIterator first,
					   BidirectionalIterator last,
					   Predicate pred);




  //  lib.alg.sorting, sorting and related operations:
  //  lib.alg.sort, sorting:
  template<class RandomAccessIterator>
    void sort(RandomAccessIterator first, RandomAccessIterator last) { *first<*(first+1); advance (first, 0); }
  template<class RandomAccessIterator, class Compare>
    void sort(RandomAccessIterator first, RandomAccessIterator last,
	      Compare comp) { comp(*first, *(first+1)); advance (first, 0); }




  template<class RandomAccessIterator>
    void stable_sort(RandomAccessIterator first, RandomAccessIterator last) { std::sort (first, last); }
  template<class RandomAccessIterator, class Compare>
    void stable_sort(RandomAccessIterator first, RandomAccessIterator last,
		     Compare comp) { std::sort (first, last, comp); }




  template<class RandomAccessIterator>
    void partial_sort(RandomAccessIterator first,
		      RandomAccessIterator middle,
		      RandomAccessIterator last) { std::sort (first, middle); }
  template<class RandomAccessIterator, class Compare>
    void partial_sort(RandomAccessIterator first,
		      RandomAccessIterator middle,
		      RandomAccessIterator last, Compare comp) { std::sort (first, middle, comp); }
  template<class InputIterator, class RandomAccessIterator>
    RandomAccessIterator
      partial_sort_copy(InputIterator first, InputIterator last,
			RandomAccessIterator result_first,
			RandomAccessIterator result_last);
  template<class InputIterator, class RandomAccessIterator, class Compare>
    RandomAccessIterator
      partial_sort_copy(InputIterator first, InputIterator last,
			RandomAccessIterator result_first,
			RandomAccessIterator result_last,
			Compare comp);




  template<class RandomAccessIterator>
    void nth_element(RandomAccessIterator first, RandomAccessIterator nth,
		     RandomAccessIterator last);
  template<class RandomAccessIterator, class Compare>
    void nth_element(RandomAccessIterator first, RandomAccessIterator nth,
		     RandomAccessIterator last, Compare comp);




  //  lib.alg.binary.search, binary search:
  template<class ForwardIterator, class T>
    ForwardIterator lower_bound(ForwardIterator first, ForwardIterator last,
				const T& value);
  template<class ForwardIterator, class T, class Compare>
    ForwardIterator lower_bound(ForwardIterator first, ForwardIterator last,
				const T& value, Compare comp);




  template<class ForwardIterator, class T>
    ForwardIterator upper_bound(ForwardIterator first, ForwardIterator last,
				const T& value);
  template<class ForwardIterator, class T, class Compare>
    ForwardIterator upper_bound(ForwardIterator first, ForwardIterator last,
				const T& value, Compare comp);




  template<class ForwardIterator, class T>
    pair<ForwardIterator, ForwardIterator>
      equal_range(ForwardIterator first, ForwardIterator last,
		  const T& value);
  template<class ForwardIterator, class T, class Compare>
    pair<ForwardIterator, ForwardIterator>
      equal_range(ForwardIterator first, ForwardIterator last,
		  const T& value, Compare comp);




  template<class ForwardIterator, class T>
    bool binary_search(ForwardIterator first, ForwardIterator last,
		       const T& value);
  template<class ForwardIterator, class T, class Compare>
    bool binary_search(ForwardIterator first, ForwardIterator last,
		       const T& value, Compare comp);




  //  lib.alg.merge, merge:
  template<class InputIterator1, class InputIterator2, class OutputIterator>
    OutputIterator merge(InputIterator1 first1, InputIterator1 last1,
			 InputIterator2 first2, InputIterator2 last2,
			 OutputIterator result);
  template<class InputIterator1, class InputIterator2, class OutputIterator,
	   class Compare>
    OutputIterator merge(InputIterator1 first1, InputIterator1 last1,
			 InputIterator2 first2, InputIterator2 last2,
			 OutputIterator result, Compare comp);




  template<class BidirectionalIterator>
    void inplace_merge(BidirectionalIterator first,
		       BidirectionalIterator middle,
		       BidirectionalIterator last);
  template<class BidirectionalIterator, class Compare>
    void inplace_merge(BidirectionalIterator first,
		       BidirectionalIterator middle,
		       BidirectionalIterator last, Compare comp);




  //  lib.alg.set.operations, set operations:
  template<class InputIterator1, class InputIterator2>
    bool includes(InputIterator1 first1, InputIterator1 last1,
		  InputIterator2 first2, InputIterator2 last2);
  template<class InputIterator1, class InputIterator2, class Compare>
    bool includes
      (InputIterator1 first1, InputIterator1 last1,
       InputIterator2 first2, InputIterator2 last2, Compare comp);




  template<class InputIterator1, class InputIterator2, class OutputIterator>
    OutputIterator set_union(InputIterator1 first1, InputIterator1 last1,
			     InputIterator2 first2, InputIterator2 last2,
			     OutputIterator result);
  template<class InputIterator1, class InputIterator2, class OutputIterator,
	   class Compare>
    OutputIterator set_union(InputIterator1 first1, InputIterator1 last1,
			     InputIterator2 first2, InputIterator2 last2,
			     OutputIterator result, Compare comp);




  template<class InputIterator1, class InputIterator2, class OutputIterator>
    OutputIterator set_intersection
	(InputIterator1 first1, InputIterator1 last1,
	 InputIterator2 first2, InputIterator2 last2,
	 OutputIterator result);
  template<class InputIterator1, class InputIterator2, class OutputIterator,
	   class Compare>
    OutputIterator set_intersection
	(InputIterator1 first1, InputIterator1 last1,
	 InputIterator2 first2, InputIterator2 last2,
	 OutputIterator result, Compare comp);




  template<class InputIterator1, class InputIterator2, class OutputIterator>
    OutputIterator set_difference
	(InputIterator1 first1, InputIterator1 last1,
	 InputIterator2 first2, InputIterator2 last2,
	 OutputIterator result);
  template<class InputIterator1, class InputIterator2, class OutputIterator,
	   class Compare>
    OutputIterator set_difference
	(InputIterator1 first1, InputIterator1 last1,
	 InputIterator2 first2, InputIterator2 last2,
	 OutputIterator result, Compare comp);




  template<class InputIterator1, class InputIterator2, class OutputIterator>
    OutputIterator
      set_symmetric_difference(InputIterator1 first1, InputIterator1 last1,
			       InputIterator2 first2, InputIterator2 last2,
			       OutputIterator result);
  template<class InputIterator1, class InputIterator2, class OutputIterator,
	    class Compare>
    OutputIterator
      set_symmetric_difference(InputIterator1 first1, InputIterator1 last1,
			       InputIterator2 first2, InputIterator2 last2,
			       OutputIterator result, Compare comp);




  //  lib.alg.heap.operations, heap operations:
  template<class RandomAccessIterator>
    void push_heap(RandomAccessIterator first, RandomAccessIterator last);
  template<class RandomAccessIterator, class Compare>
    void push_heap(RandomAccessIterator first, RandomAccessIterator last,
		   Compare comp);




  template<class RandomAccessIterator>
    void pop_heap(RandomAccessIterator first, RandomAccessIterator last);
  template<class RandomAccessIterator, class Compare>
    void pop_heap(RandomAccessIterator first, RandomAccessIterator last,
		  Compare comp);




  template<class RandomAccessIterator>
    void make_heap(RandomAccessIterator first, RandomAccessIterator last);
  template<class RandomAccessIterator, class Compare>
    void make_heap(RandomAccessIterator first, RandomAccessIterator last,
		   Compare comp);




  template<class RandomAccessIterator>
    void sort_heap(RandomAccessIterator first, RandomAccessIterator last);
  template<class RandomAccessIterator, class Compare>
    void sort_heap(RandomAccessIterator first, RandomAccessIterator last,
		   Compare comp);




  //  lib.alg.min.max, minimum and maximum:
  template<class T> const T& min(const T& a, const T& b);
  template<class T, class Compare>
    const T& min(const T& a, const T& b, Compare comp);
  template<class T> const T& max(const T& a, const T& b);
  template<class T, class Compare>
    const T& max(const T& a, const T& b, Compare comp);




  template<class ForwardIterator>
    ForwardIterator min_element
      (ForwardIterator first, ForwardIterator last);
  template<class ForwardIterator, class Compare>
    ForwardIterator min_element(ForwardIterator first, ForwardIterator last,
			      Compare comp);
  template<class ForwardIterator>
    ForwardIterator max_element
      (ForwardIterator first, ForwardIterator last);
  template<class ForwardIterator, class Compare>
    ForwardIterator max_element(ForwardIterator first, ForwardIterator last,
			      Compare comp);




  template<class InputIterator1, class InputIterator2>
    bool lexicographical_compare
	(InputIterator1 first1, InputIterator1 last1,
	 InputIterator2 first2, InputIterator2 last2);
  template<class InputIterator1, class InputIterator2, class Compare>
    bool lexicographical_compare
	(InputIterator1 first1, InputIterator1 last1,
	 InputIterator2 first2, InputIterator2 last2,
	 Compare comp);




  //  lib.alg.permutation.generators, permutations
  template<class BidirectionalIterator>
    bool next_permutation(BidirectionalIterator first,
			  BidirectionalIterator last);
  template<class BidirectionalIterator, class Compare>
    bool next_permutation(BidirectionalIterator first,
			  BidirectionalIterator last, Compare comp);
  template<class BidirectionalIterator>
    bool prev_permutation(BidirectionalIterator first,
			  BidirectionalIterator last);
  template<class BidirectionalIterator, class Compare>
    bool prev_permutation(BidirectionalIterator first,
			  BidirectionalIterator last, Compare comp);


__QAC_END_NAMESPACE


// BEGIN BLOCK postfix
// Updated by paul on Tue Jun  8 11:15:36 IST 1999
#endif // ends __QAC_INCLUDE_algorithm__
// END BLOCK postfix
