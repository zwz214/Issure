// paulfitz Thu Jun  3 09:39:19 IST 1999

// BEGIN BLOCK prefix
// Updated by paul on Tue Jun  8 11:15:39 IST 1999
// Part of a simple implementation of the standard C++ library, as
// described in ISO/IEC 14882:1998(E)

#ifndef __QAC_INCLUDE_set__
#define __QAC_INCLUDE_set__

// Some flags to control how closely the standard is followed
#include <qac_config.h>

// END BLOCK prefix

#include <qac_iterator.h>

#include <initializer_list>
#include <memory>
#include <functional>

__QAC_BEGIN_NAMESPACE



  template <class Key, class Compare = less<Key>,
	    class Allocator = allocator<Key> >
    class set;
  template <class Key, class Compare, class Allocator>
    bool operator==(const set<Key,Compare,Allocator>& x,
		    const set<Key,Compare,Allocator>& y);
  template <class Key, class Compare, class Allocator>
    bool operator< (const set<Key,Compare,Allocator>& x,
		    const set<Key,Compare,Allocator>& y);
  template <class Key, class Compare, class Allocator>
    bool operator!=(const set<Key,Compare,Allocator>& x,
		    const set<Key,Compare,Allocator>& y);
  template <class Key, class Compare, class Allocator>
    bool operator> (const set<Key,Compare,Allocator>& x,
		    const set<Key,Compare,Allocator>& y);
  template <class Key, class Compare, class Allocator>
    bool operator>=(const set<Key,Compare,Allocator>& x,
		    const set<Key,Compare,Allocator>& y);
  template <class Key, class Compare, class Allocator>
    bool operator<=(const set<Key,Compare,Allocator>& x,
		    const set<Key,Compare,Allocator>& y);
  template <class Key, class Compare, class Allocator>
    void swap(set<Key,Compare,Allocator>& x,
	      set<Key,Compare,Allocator>& y);




  template <class Key, class Compare = less<Key>,
	    class Allocator = allocator<Key> >
    class multiset;
  template <class Key, class Compare, class Allocator>
    bool operator==(const multiset<Key,Compare,Allocator>& x,
		    const multiset<Key,Compare,Allocator>& y);
  template <class Key, class Compare, class Allocator>
    bool operator< (const multiset<Key,Compare,Allocator>& x,
		    const multiset<Key,Compare,Allocator>& y);
  template <class Key, class Compare, class Allocator>
    bool operator!=(const multiset<Key,Compare,Allocator>& x,
		    const multiset<Key,Compare,Allocator>& y);
  template <class Key, class Compare, class Allocator>
    bool operator> (const multiset<Key,Compare,Allocator>& x,
		    const multiset<Key,Compare,Allocator>& y);
  template <class Key, class Compare, class Allocator>
    bool operator>=(const multiset<Key,Compare,Allocator>& x,
		    const multiset<Key,Compare,Allocator>& y);
  template <class Key, class Compare, class Allocator>
    bool operator<=(const multiset<Key,Compare,Allocator>& x,
		    const multiset<Key,Compare,Allocator>& y);
  template <class Key, class Compare, class Allocator>
    void swap(multiset<Key,Compare,Allocator>& x,
	      multiset<Key,Compare,Allocator>& y);




//  template <class Key, class Compare = less<Key>,
//	    class Allocator = allocator<Key> >
  template <class Key, class Compare,
	    class Allocator>
  class set {
  public:
    //  types:
    typedef Key                                   key_type;
    typedef Key                                   value_type;
    typedef Compare                               key_compare;
    typedef Compare                               value_compare;
    typedef Allocator                             allocator_type;
    typedef typename Allocator::reference         reference;
    typedef typename Allocator::const_reference   const_reference;

    // HIT picked 4 types - see lib.container.requirements	
    typedef __normal_iterator<value_type*, set<Key, Compare, Allocator> >
                                                  iterator;
    typedef __normal_iterator<const value_type*, set<Key, Compare, Allocator> >
                                                  const_iterator;
    typedef size_t                                size_type;
    typedef ptrdiff_t                             difference_type;

    typedef typename Allocator::pointer           pointer;
    typedef typename Allocator::const_pointer     const_pointer;
    typedef std::reverse_iterator<iterator>       reverse_iterator;
    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;




    //  lib.set.cons construct/copy/destroy:
    explicit set(const Compare& comp = Compare(),
		 const Allocator& = Allocator());
    template <class InputIterator>
      set(InputIterator first, InputIterator last,
	  const Compare& comp = Compare(), const Allocator& = Allocator());
    set(initializer_list<value_type>,
	  const Compare& comp = Compare(), const Allocator& = Allocator());
    set(const set<Key,Compare,Allocator>& x);
   ~set();
    set<Key,Compare,Allocator>& operator=
      (const set<Key,Compare,Allocator>& x);
    allocator_type get_allocator() const;




    //  iterators:
    iterator               begin();
    const_iterator         begin() const;
    const_iterator         cbegin() const;
    iterator               end();
    const_iterator         end() const;
    const_iterator         cend() const;
    reverse_iterator       rbegin();
    const_reverse_iterator rbegin() const;
    const_reverse_iterator crbegin() const;
    reverse_iterator       rend();
    const_reverse_iterator rend() const;
    const_reverse_iterator crend() const;


    //  capacity:
    bool          empty() const;
    size_type     size() const;
    size_type     max_size() const;



    //  modifiers:
    pair<iterator,bool> insert(const value_type& x);
    iterator            insert(iterator position, const value_type& x);
    template <class InputIterator>
	void insert(InputIterator first, InputIterator last);



    void      erase(iterator position);
    size_type erase(const key_type& x);
    void      erase(iterator first, iterator last);
    void swap(set<Key,Compare,Allocator>&);
    void clear();



    //  observers:
    key_compare   key_comp() const;
    value_compare value_comp() const;



    //  set operations:
    iterator  find(const key_type& x) const;
    size_type count(const key_type& x) const;




    iterator  lower_bound(const key_type& x) const;
    iterator  upper_bound(const key_type& x) const;
    pair<iterator,iterator> equal_range(const key_type& x) const;
  };




  template <class Key, class Compare, class Allocator>
    bool operator==(const set<Key,Compare,Allocator>& x,
		    const set<Key,Compare,Allocator>& y);
  template <class Key, class Compare, class Allocator>
    bool operator< (const set<Key,Compare,Allocator>& x,
		    const set<Key,Compare,Allocator>& y);
  template <class Key, class Compare, class Allocator>
    bool operator!=(const set<Key,Compare,Allocator>& x,
		    const set<Key,Compare,Allocator>& y);
  template <class Key, class Compare, class Allocator>
    bool operator> (const set<Key,Compare,Allocator>& x,
		    const set<Key,Compare,Allocator>& y);
  template <class Key, class Compare, class Allocator>
    bool operator>=(const set<Key,Compare,Allocator>& x,
		    const set<Key,Compare,Allocator>& y);
  template <class Key, class Compare, class Allocator>
    bool operator<=(const set<Key,Compare,Allocator>& x,
		    const set<Key,Compare,Allocator>& y);




  //  specialized algorithms:
  template <class Key, class Compare, class Allocator>
    void swap(set<Key,Compare,Allocator>& x,
	      set<Key,Compare,Allocator>& y);





//  template <class Key, class Compare = less<Key>,
//	    class Allocator = allocator<Key> >
  template <class Key, class Compare,
	    class Allocator>
  class multiset {
  public:
    //  types:
    typedef Key                                   key_type;
    typedef Key                                   value_type;
    typedef Compare                               key_compare;
    typedef Compare                               value_compare;
    typedef Allocator                             allocator_type;
    typedef typename Allocator::reference         reference;
    typedef typename Allocator::const_reference   const_reference;

    // HIT picked 4 types - see lib.container.requirements	
    typedef __normal_iterator<value_type*, multiset<Key, Compare, Allocator> >
                                                  iterator;
    typedef __normal_iterator<const value_type*, 
	multiset<Key, Compare, Allocator> >       const_iterator;
    typedef size_t                                size_type;
    typedef ptrdiff_t                             difference_type;

    typedef typename Allocator::pointer           pointer;
    typedef typename Allocator::const_pointer     const_pointer;
    typedef std::reverse_iterator<iterator>       reverse_iterator;
    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;




    //  construct/copy/destroy:
    explicit multiset(const Compare& comp = Compare(),
		      const Allocator& = Allocator());
    template <class InputIterator>
      multiset(InputIterator first, InputIterator last,
	       const Compare& comp = Compare(),
	       const Allocator& = Allocator());
    multiset(initializer_list<value_type>,
	     const Compare& comp = Compare(), const Allocator& = Allocator());
    multiset(const multiset<Key,Compare,Allocator>& x);
   ~multiset();
    multiset<Key,Compare,Allocator>&
	operator=(const multiset<Key,Compare,Allocator>& x);
    allocator_type get_allocator() const;




    //  iterators:
    iterator               begin();
    const_iterator         begin() const;
    const_iterator         cbegin() const;
    iterator               end();
    const_iterator         end() const;
    const_iterator         cend() const;
    reverse_iterator       rbegin();
    const_reverse_iterator rbegin() const;
    const_reverse_iterator crbegin() const;
    reverse_iterator       rend();
    const_reverse_iterator rend() const;
    const_reverse_iterator crend() const;




    //  capacity:
    bool          empty() const;
    size_type     size() const;
    size_type     max_size() const;




    //  modifiers:
    iterator insert(const value_type& x);
    iterator insert(iterator position, const value_type& x);
    template <class InputIterator>
      void insert(InputIterator first, InputIterator last);




    void      erase(iterator position);
    size_type erase(const key_type& x);
    void      erase(iterator first, iterator last);
    void swap(multiset<Key,Compare,Allocator>&);
    void clear();




    //  observers:
    key_compare   key_comp() const;
    value_compare value_comp() const;




    //  set operations:
    iterator  find(const key_type& x) const;
    size_type count(const key_type& x) const;




    iterator  lower_bound(const key_type& x) const;
    iterator  upper_bound(const key_type& x) const;
    pair<iterator,iterator> equal_range(const key_type& x) const;
  };




  template <class Key, class Compare, class Allocator>
    bool operator==(const multiset<Key,Compare,Allocator>& x,
		    const multiset<Key,Compare,Allocator>& y);
  template <class Key, class Compare, class Allocator>
    bool operator< (const multiset<Key,Compare,Allocator>& x,
		    const multiset<Key,Compare,Allocator>& y);
  template <class Key, class Compare, class Allocator>
    bool operator!=(const multiset<Key,Compare,Allocator>& x,
		    const multiset<Key,Compare,Allocator>& y);
  template <class Key, class Compare, class Allocator>
    bool operator> (const multiset<Key,Compare,Allocator>& x,
		    const multiset<Key,Compare,Allocator>& y);
  template <class Key, class Compare, class Allocator>
    bool operator>=(const multiset<Key,Compare,Allocator>& x,
		    const multiset<Key,Compare,Allocator>& y);
  template <class Key, class Compare, class Allocator>
    bool operator<=(const multiset<Key,Compare,Allocator>& x,
		    const multiset<Key,Compare,Allocator>& y);




  //  specialized algorithms:
  template <class Key, class Compare, class Allocator>
    void swap(multiset<Key,Compare,Allocator>& x,
	      multiset<Key,Compare,Allocator>& y);






__QAC_END_NAMESPACE


// BEGIN BLOCK postfix
// Updated by paul on Tue Jun  8 11:15:39 IST 1999
#endif // ends __QAC_INCLUDE_set__
// END BLOCK postfix

