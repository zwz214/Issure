// paulfitz Thu Jun  3 09:39:19 IST 1999

// BEGIN BLOCK prefix
// Updated by paul on Tue Jun  8 11:15:38 IST 1999
// Part of a simple implementation of the standard C++ library, as
// described in ISO/IEC 14882:1998(E)

#ifndef __QAC_INCLUDE_ostream__
#define __QAC_INCLUDE_ostream__

// Some flags to control how closely the standard is followed
#include <qac_config.h>

// END BLOCK prefix

#include <ios>

__QAC_BEGIN_NAMESPACE


  template <class charT, class traits>
  class basic_ostream : virtual public basic_ios<charT,traits> {
  public:
  //  Types (inherited from  basic_ios  (lib.ios)):
    typedef charT                     char_type;
    typedef typename traits::int_type int_type;
    typedef typename traits::pos_type pos_type;
    typedef typename traits::off_type off_type;
    typedef traits                    traits_type;

    //  lib.ostream.cons Constructor/destructor:
    explicit basic_ostream(basic_streambuf<char_type,traits>* sb);
    virtual ~basic_ostream();

    //  lib.ostream::sentry Prefix/suffix:
    class sentry;

    //  lib.ostream.formatted Formatted output:
    basic_ostream<charT,traits>& operator<<
	(basic_ostream<charT,traits>& (*pf)(basic_ostream<charT,traits>&));
    basic_ostream<charT,traits>& operator<<
	(basic_ios<charT,traits>& (*pf)(basic_ios<charT,traits>&));
    basic_ostream<charT,traits>& operator<<
	(ios_base& (*pf)(ios_base&));

    basic_ostream<charT,traits>& operator<<(bool n);
    basic_ostream<charT,traits>& operator<<(short n);
    basic_ostream<charT,traits>& operator<<(unsigned short n);
    basic_ostream<charT,traits>& operator<<(int n);
    basic_ostream<charT,traits>& operator<<(unsigned int n);
    basic_ostream<charT,traits>& operator<<(long n);
    basic_ostream<charT,traits>& operator<<(unsigned long n);
    basic_ostream<charT,traits>& operator<<(float f);
    basic_ostream<charT,traits>& operator<<(double f);
    basic_ostream<charT,traits>& operator<<(long double f);

#ifndef QAC_NO_LONG_LONG
    basic_ostream<charT,traits>& operator<<(long long n);
    basic_ostream<charT,traits>& operator<<(unsigned long long n); 
#endif /* QAC_NO_LONG_LONG */

    basic_ostream<charT,traits>& operator<<(const void* p);
    basic_ostream<charT,traits>& operator<<
	(basic_streambuf<char_type,traits>* sb);

    //  lib.ostream.unformatted Unformatted output:
    basic_ostream<charT,traits>& put(char_type c);
    basic_ostream<charT,traits>& write(const char_type* s, streamsize n);

    basic_ostream<charT,traits>& flush();

    //  lib.ostream.seeks seeks:
    pos_type tellp();
    basic_ostream<charT,traits>& seekp(pos_type);
    basic_ostream<charT,traits>& seekp(off_type, ios_base::seekdir);
  };


  //  lib.ostream.inserters.character character inserters
  template<class charT, class traits>
  basic_ostream<charT,traits>& operator<<(basic_ostream<charT,traits>&,
					  charT);
  template<class charT, class traits>
  basic_ostream<charT,traits>& operator<<(basic_ostream<charT,traits>&,
					  char);
  //  specialization
  template<class traits>
    basic_ostream<char,traits>& operator<<(basic_ostream<char,traits>&,
					   char);
  //  signed and unsigned
  template<class traits>
    basic_ostream<char,traits>& operator<<(basic_ostream<char,traits>&,
					   signed char);

  // SPEC TYPO (assumed) -- added semicolon
  template<class traits>
    basic_ostream<char,traits>& operator<<(basic_ostream<char,traits>&,
					   unsigned char);

  template<class charT, class traits>
    basic_ostream<charT,traits>& operator<<(basic_ostream<charT,traits>&,
					    const charT*);

  template<class charT, class traits>
    basic_ostream<charT,traits>& operator<<(basic_ostream<charT,traits>&,
					    const char*);
  //  partial specializationss
  template<class traits>
    basic_ostream<char,traits>& operator<<(basic_ostream<char,traits>&,
					   const char*);
  //   signed and unsigned
  template<class traits>
    basic_ostream<char,traits>& operator<<(basic_ostream<char,traits>&,
					   const signed char*);
  template<class traits>
    basic_ostream<char,traits>& operator<<(basic_ostream<char,traits>&,
					   const unsigned char*);

  template <class charT, class traits >
  class basic_ostream<charT,traits>::sentry {
    bool ok_; // exposition only
   public:
    explicit sentry(basic_ostream<charT,traits>& os);
    ~sentry();
    operator bool() const { return ok_; }
   // SPEC TYPO (assumed) -- added full colon
   private: 
    sentry(const sentry&); //   not defined
    sentry& operator=(const sentry&); //   not defined
  };


  template <class charT, class traits>
    basic_ostream<charT,traits>& endl(basic_ostream<charT,traits>& os);
  template <class charT, class traits>
    basic_ostream<charT,traits>& ends(basic_ostream<charT,traits>& os);
  template <class charT, class traits>
    basic_ostream<charT,traits>& flush(basic_ostream<charT,traits>& os);


__QAC_END_NAMESPACE


// BEGIN BLOCK postfix
// Updated by paul on Tue Jun  8 11:15:38 IST 1999
#endif // ends __QAC_INCLUDE_ostream__
// END BLOCK postfix

