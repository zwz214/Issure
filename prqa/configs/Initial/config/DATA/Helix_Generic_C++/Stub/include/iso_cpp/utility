// paulfitz Thu Jun  3 09:39:19 IST 1999

// BEGIN BLOCK prefix
// Updated by paul on Tue Jun  8 11:15:39 IST 1999
// Part of a simple implementation of the standard C++ library, as
// described in ISO/IEC 14882:1998(E)

#ifndef __QAC_INCLUDE_utility__
#define __QAC_INCLUDE_utility__

// Some flags to control how closely the standard is followed
#include <qac_config.h>
#include <cstddef>

// END BLOCK prefix


__QAC_BEGIN_NAMESPACE

  // (from type_traits)
  // 20.9.7.2, reference modifications:
  template <class T> struct remove_reference { typedef T type; };
  template <class T> struct remove_reference<T &> { typedef T type; };

  template <class T> struct add_lvalue_reference { typedef T &type; };
  template <class T>
  using add_lvalue_reference_t = typename add_lvalue_reference<T>::type;
  template <class T> struct add_rvalue_reference { typedef T &&type; };
  template <class T>
  using add_rvalue_reference_t = typename add_rvalue_reference<T>::type;

  template <class T> struct decay;

  //  lib.operators, operators:
#ifndef __QAC_NO_REL_OPS_NAMESPACE
  namespace rel_ops {
#endif
    template<class T> bool operator!=(const T& x, const T&y ) { return ! (x == y); }
    template<class T> bool operator> (const T& x, const T& y) { return   (y < x); }
    template<class T> bool operator<=(const T& x, const T& y) { return ! (y < x); }
    template<class T> bool operator>=(const T& x, const T& y) { return ! (x < y); }
#ifndef __QAC_NO_REL_OPS_NAMESPACE
  }
#endif


  template <class T> T&& forward(typename remove_reference<T>::type& t) noexcept;
  template <class T> T&& forward(typename remove_reference<T>::type&& t) noexcept;
  template <class T> typename remove_reference<T>::type&& move(T&&) noexcept;

  // 23.2.7, declval
  template <class T>
  add_rvalue_reference_t<T> declval() noexcept;

#if __cplusplus >= 201402
  // 23.3, Compile-time integer sequences
  template<class T, T ... I>
  struct integer_sequence
  {
    typedef T type;
    static constexpr size_t size() noexcept
    { return sizeof ... (I); }
  };

  template<class T, T ... I>
  struct __qacpp_integer_seq
  {
    template<T N>
    using append = __qacpp_integer_seq<T, I ..., N>;
    using next = append<sizeof ... (I)>;

    template<template<class T1, T1 ...> class V>
    using type = V<T, I ...>;
  };

  template<class T, T S>
  struct __qacpp_make_integer_seq
  {
    typedef typename __qacpp_make_integer_seq<T, S - 1>::type::next type;
  };

  template<class T>
  struct __qacpp_make_integer_seq<T, 0>
  {
    typedef __qacpp_integer_seq<T> type;
  };

  template<size_t... I>
  using index_sequence = integer_sequence<size_t, I...>;

  template<class T, T N>
  using make_integer_sequence =
    typename __qacpp_make_integer_seq<T, N>::type::template type<integer_sequence>;

  template<size_t N>
  using make_index_sequence = make_integer_sequence<size_t, N>;

  template<class... T>
  using index_sequence_for = make_index_sequence<sizeof...(T)>;
#endif

#if __cplusplus >= 201103
  template< class T > void swap( T& a, T& b );
  template< class T2, std::size_t N > void swap( T2 (&a)[N], T2 (&b)[N]);
#endif

  //  lib.pairs, pairs:

template <class T1, class T2>
struct pair {
  typedef T1 first_type;
  typedef T2 second_type;

  T1 first;
  T2 second;
  pair()
    : first ()
    , second ()
  {
  }

  pair(const T1& x, const T2& y)
  : first (x)
  , second (y)
  {
  }

  template<class U, class V> pair(const pair<U, V> &p)
  : first (p.first)
  , second (p.second)
  {
  }
 };

  template <class T1, class T2>
    bool operator==(const pair<T1,T2>& x, const pair<T1,T2>& y) { return (x.first == y.first) && (x.second == y.second);  }
  template <class T1, class T2>
    bool operator< (const pair<T1,T2>& x, const pair<T1,T2>& y) { return (x.first < y.first) || (! (y.first < x.first) && (x.second < y.second));  }
  template <class T1, class T2>
    bool operator!=(const pair<T1,T2>& x, const pair<T1,T2>& y) { return ! (x == y); }
  template <class T1, class T2>
    bool operator> (const pair<T1,T2>& x, const pair<T1,T2>& y) { return   (y < x); }
  template <class T1, class T2>
    bool operator>=(const pair<T1,T2>& x, const pair<T1,T2>& y) { return ! (x < y); }
  template <class T1, class T2>
    bool operator<=(const pair<T1,T2>& x, const pair<T1,T2>& y) { return ! (y < x); }

  template <class T1, class T2>
  pair<typename decay<T1>::type, typename decay<T2>::type>
  make_pair(T1&& x, T2&& y)
  {
    typedef typename decay<T1>::type U1;
    typedef U1 V1;
    typedef typename decay<T2>::type U2;
    typedef U2 V2;

    return pair<V1, V2>(std::forward<T1>(x), std::forward<T2>(y));
  }


  template <class T> class tuple_size;
  template <size_t I, class T> class tuple_element;

  template <class T1, class T2> struct tuple_size<pair<T1, T2> >;
  template <class T1, class T2> struct tuple_element<0, pair<T1, T2> >
  {
    typedef T1 type;
  };
  template <class T1, class T2> struct tuple_element<1, pair<T1, T2> >
  {
    typedef T2 type;
  };

  template<size_t I, class T1, class T2>
  typename tuple_element<I, std::pair<T1, T2> >::type& get(pair<T1, T2>&) noexcept;

  template<size_t I, class T1, class T2>
  typename tuple_element<I, pair<T1, T2> >::type&& get(pair<T1, T2>&&) noexcept;

  template<size_t I, class T1, class T2>
  const typename tuple_element<I, pair<T1, T2> >::type&
  get(const pair<T1, T2>&) noexcept;


__QAC_END_NAMESPACE


// BEGIN BLOCK postfix
// Updated by paul on Tue Jun  8 11:15:39 IST 1999
#endif // ends __QAC_INCLUDE_utility__
// END BLOCK postfix

