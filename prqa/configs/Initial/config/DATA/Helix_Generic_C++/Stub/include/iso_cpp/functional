// paulfitz Thu Jun  3 09:39:18 IST 1999

// BEGIN BLOCK prefix
// Updated by paul on Tue Jun  8 11:15:37 IST 1999
// Part of a simple implementation of the standard C++ library, as
// described in ISO/IEC 14882:1998(E)

#ifndef __QAC_INCLUDE_functional__
#define __QAC_INCLUDE_functional__

// Some flags to control how closely the standard is followed
#include <qac_config.h>
#include <memory>
#include <typeinfo>
#include <type_traits>

// END BLOCK prefix


__QAC_BEGIN_NAMESPACE

  // 20.8.3, reference_wrapper:
  template <class T> class reference_wrapper {
  public :
    // types
    typedef T type;
    //typedef result_type;               // not always defined
    //typedef argument_type;             // not always defined
    //typedef first_argument_type;       // not always defined
    //typedef second_argument_type;      // not always defined

    // construct/copy/destroy
    reference_wrapper(T&) noexcept;
    reference_wrapper(T&&) = delete;     // do not bind to temporary objects
    reference_wrapper(const reference_wrapper<T>& x) noexcept;

    // assignment
    reference_wrapper& operator=(const reference_wrapper<T>& x) noexcept;

    // access
    operator T& () const noexcept;
    T& get() const noexcept;

    // invocation
    template <class... ArgTypes>
    typename result_of<T&(ArgTypes&&...)>::type
    operator() (ArgTypes&&...) const;
  };

  template <class T> reference_wrapper<T> ref(T&) noexcept;
  template <class T> reference_wrapper<const T> cref(const T&) noexcept;
  template <class T> void ref(const T&&) = delete;
  template <class T> void cref(const T&&) = delete;

  template <class T> reference_wrapper<T> ref(reference_wrapper<T>) noexcept;
  template <class T> reference_wrapper<const T> cref(reference_wrapper<T>) noexcept;


  //  lib.negators, negators:
  template <class Predicate> struct unary_negate;
  template <class Predicate>
    unary_negate<Predicate>  not1(const Predicate&);
  template <class Predicate> struct binary_negate;
  template <class Predicate>
    binary_negate<Predicate> not2(const Predicate&);




  //  lib.binders, binders:
  template <class Operation>  class binder1st;
  template <class Operation, class T>
    binder1st<Operation> bind1st(const Operation&, const T&);
  template <class Operation> class binder2nd;
  template <class Operation, class T>
    binder2nd<Operation> bind2nd(const Operation&, const T&);




  //  lib.function.pointer.adaptors, adaptors:
  template <class Arg, class Result> class pointer_to_unary_function;
  template <class Arg, class Result>
    pointer_to_unary_function<Arg,Result> ptr_fun(Result (*)(Arg));
  template <class Arg1, class Arg2, class Result>
    class pointer_to_binary_function;
  template <class Arg1, class Arg2, class Result>
    pointer_to_binary_function<Arg1,Arg2,Result>
      ptr_fun(Result (*)(Arg1,Arg2));




  //  lib.member.pointer.adaptors, adaptors:
  template<class S, class T> class mem_fun_t;
  template<class S, class T, class A> class mem_fun1_t;
  template<class S, class T>
      mem_fun_t<S,T> mem_fun(S (T::*f)());
  template<class S, class T, class A>
      mem_fun1_t<S,T,A> mem_fun(S (T::*f)(A));
  template<class S, class T> class mem_fun_ref_t;
  template<class S, class T, class A> class mem_fun1_ref_t;
  template<class S, class T>
      mem_fun_ref_t<S,T> mem_fun_ref(S (T::*f)());
  template<class S, class T, class A>
      mem_fun1_ref_t<S,T,A> mem_fun_ref(S (T::*f)(A));

  template <class S, class T> class const_mem_fun_t;
  template <class S, class T, class A> class const_mem_fun1_t;
  template <class S, class T>
    const_mem_fun_t<S,T> mem_fun(S (T::*f)() const);
  template <class S, class T, class A>
    const_mem_fun1_t<S,T,A> mem_fun(S (T::*f)(A) const);
  template <class S, class T> class const_mem_fun_ref_t;
  template <class S, class T, class A> class const_mem_fun1_ref_t;
  template <class S, class T>
    const_mem_fun_ref_t<S,T> mem_fun_ref(S (T::*f)() const);
  template <class S, class T, class A>
    const_mem_fun1_ref_t<S,T,A> mem_fun_ref(S (T::*f)(A) const);




template <class Arg, class Result>
  struct unary_function {
    typedef Arg    argument_type;
    typedef Result result_type;
  };




  template <class Arg1, class Arg2, class Result>
  struct binary_function {
    typedef Arg1   first_argument_type;
    typedef Arg2   second_argument_type;
    typedef Result result_type;
  };

 


template <class T> struct plus : binary_function<T,T,T> {
  T operator()(const T& x, const T& y) const { return x+y; }
 };

template <class T> struct minus : binary_function<T,T,T> {
  T operator()(const T& x, const T& y) const { return x-y; }
 };

template <class T> struct multiplies : binary_function<T,T,T> {
  T operator()(const T& x, const T& y) const { return x*y; }
 };

template <class T> struct divides : binary_function<T,T,T> {
  T operator()(const T& x, const T& y) const { return x/y; }
 };

template <class T> struct modulus : binary_function<T,T,T> {
  T operator()(const T& x, const T& y) const { return x%y; }
 };

template <class T> struct negate : unary_function<T,T> {
  T operator()(const T& x) const { return -x; }
 };

template <class T> struct equal_to : binary_function<T,T,bool> {
  bool operator()(const T& x, const T& y) const { return x==y; }
 };

template <class T> struct not_equal_to : binary_function<T,T,bool> {
  bool operator()(const T& x, const T& y) const  { return x!=y; }
 };

template <class T> struct greater : binary_function<T,T,bool> {
  bool operator()(const T& x, const T& y) const  { return x>y; }
 };

template <class T> struct less : binary_function<T,T,bool> {
  bool operator()(const T& x, const T& y) const  { return x<y; }
 };

template <class T> struct greater_equal : binary_function<T,T,bool> {
  bool operator()(const T& x, const T& y) const  { return x>=y; }
 };

template <class T> struct less_equal : binary_function<T,T,bool> {
  bool operator()(const T& x, const T& y) const  { return x<=y; }
 };

template <class T> struct logical_and : binary_function<T,T,bool> {
  bool operator()(const T& x, const T& y) const { return x&&y; }
 };

template <class T> struct logical_or : binary_function<T,T,bool> {
  bool operator()(const T& x, const T& y) const { return x||y; }
 };

template <class T> struct logical_not : unary_function<T,bool> {
  bool operator()(const T& x) const { return !x; }
 };

template <class Predicate>
  class unary_negate
    : public unary_function<typename Predicate::argument_type,bool> {
public:
  explicit unary_negate(const Predicate& pred);
  bool operator()(const typename Predicate::argument_type& x) const { return ! pred (x); } 

private:
  const Predicate & pred;
 };

template <class Predicate>
  class binary_negate
    : public binary_function<typename Predicate::first_argument_type,
        typename Predicate::second_argument_type,bool> {
public:
  explicit binary_negate(const Predicate& pred);
  bool operator()(const typename Predicate::first_argument_type& x,
        const typename Predicate::second_argument_type& y) const { return ! pred (x, y); } 

private:
  const Predicate & pred;
 };



  template <class Operation>
  class binder1st
    : public unary_function<typename Operation::second_argument_type,
                            typename Operation::result_type> {
  protected:
    Operation                      op;
    typename Operation::first_argument_type value;




  public:
    binder1st(const Operation& x,
              const typename Operation::first_argument_type& y);
    typename Operation::result_type
      operator()(const typename Operation::second_argument_type& x) const;
  };


  template <class Operation>
  class binder2nd
    : public unary_function<typename Operation::first_argument_type,
                            typename Operation::result_type> {
  protected:
    Operation                       op;
    typename Operation::second_argument_type value;




  public:
    binder2nd(const Operation& x,
              const typename Operation::second_argument_type& y);
    typename Operation::result_type
      operator()(const typename Operation::first_argument_type& x) const;
  };





  template <class Arg, class Result>
  class pointer_to_unary_function : public unary_function<Arg, Result> {
  public:
    explicit pointer_to_unary_function(Result (*f)(Arg));
    Result operator()(Arg x) const;
  };


  template <class Arg1, class Arg2, class Result>
  class pointer_to_binary_function :
    public binary_function<Arg1,Arg2,Result> {
  public:
    explicit pointer_to_binary_function(Result (*f)(Arg1, Arg2));
    Result operator()(Arg1 x, Arg2 y) const;
  };


template <class S, class T> class mem_fun_t
        : public unary_function<T*, S> {
public:
  explicit mem_fun_t(S (T::*p)());
  S operator()(T* p) const;
 };



  template <class S, class T, class A> class mem_fun1_t
        : public binary_function<T*, A, S> {
  public:
    explicit mem_fun1_t(S (T::*p)(A));
    S operator()(T* p, A x) const;
  };


  template <class S, class T> class mem_fun_ref_t
        : public unary_function<T, S> {
  public:
    explicit mem_fun_ref_t(S (T::*p)());
    S operator()(T& p) const;
  };


  template <class S, class T, class A> class mem_fun1_ref_t
        : public binary_function<T, A, S> {
  public:
    explicit mem_fun1_ref_t(S (T::*p)(A));
    S operator()(T& p, A x) const;
  };


template <class S, class T> class const_mem_fun_t
      : public unary_function<T*, S> {
public:
  explicit const_mem_fun_t(S (T::*p)() const);
  S operator()(const T* p) const;
 };


template <class S, class T, class A> class const_mem_fun1_t
      : public binary_function<T*, A, S> {
public:
  explicit const_mem_fun1_t(S (T::*p)(A) const);
  S operator()(const T* p, A x) const;
 };


  template <class S, class T> class const_mem_fun_ref_t
        : public unary_function<T, S> {
  public:
    explicit const_mem_fun_ref_t(S (T::*p)() const);
    S operator()(const T& p) const;
  };


  template <class S, class T, class A> class const_mem_fun1_ref_t
        : public binary_function<T, A, S> {
  public:
    explicit const_mem_fun1_ref_t(S (T::*p)(A) const);
    S operator()(const T& p, A x) const;
  };


  template<class> class function;

  template<class R, class... ArgTypes>
  class function<R(ArgTypes...)> {
  public:
    typedef R result_type;

    function() noexcept;
    function(nullptr_t) noexcept;
    function(const function&);
    function(function&&);
    template<class F> function(F);
    template<class A> function(allocator_arg_t, const A&) noexcept;
    template<class A> function(allocator_arg_t, const A&, nullptr_t) noexcept;
    template<class A> function(allocator_arg_t, const A&, const function&);
    template<class A> function(allocator_arg_t, const A&, function&&);
    template<class F, class A> function(allocator_arg_t, const A&, F);
    function& operator=(const function&);
    function& operator=(function&&);
    function& operator=(nullptr_t) noexcept;
    template<class F> function& operator=(F&&);
    template<class F> function& operator=(reference_wrapper<F>) noexcept;
   ~function();

    void swap(function&) noexcept;
    explicit operator bool() const noexcept;
    R operator()(ArgTypes...) const;
    const type_info& target_type() const noexcept;
    template<class T> T* target() noexcept;
    template<class T> const T* target() const noexcept;
  };

  template<class R, class... ArgTypes>
  void swap(function<R(ArgTypes...)>&, function<R(ArgTypes...)>&);

  template<class R, class... ArgTypes>
  bool operator==(const function<R(ArgTypes...)>&, nullptr_t) noexcept;
  template<class R, class... ArgTypes>
  bool operator==(nullptr_t, const function<R(ArgTypes...)>&) noexcept;
  template<class R, class... ArgTypes>
  bool operator!=(const function<R(ArgTypes...)>&, nullptr_t) noexcept;
  template<class R, class... ArgTypes>
  bool operator!=(nullptr_t, const function<R(ArgTypes...)>&) noexcept;

  template <class T> struct hash;

#define _HASH_FUNDAMENTAL(type) template <> struct hash<type> \
    { PRQA_SIZE_T operator () (type const & val) const { return val ; } }

_HASH_FUNDAMENTAL(bool);
_HASH_FUNDAMENTAL(char);
_HASH_FUNDAMENTAL(char16_t);
_HASH_FUNDAMENTAL(char32_t);
_HASH_FUNDAMENTAL(wchar_t);
_HASH_FUNDAMENTAL(signed char);
_HASH_FUNDAMENTAL(unsigned char);
_HASH_FUNDAMENTAL(signed short);
_HASH_FUNDAMENTAL(unsigned short);
_HASH_FUNDAMENTAL(int);
_HASH_FUNDAMENTAL(unsigned int);
_HASH_FUNDAMENTAL(long);
_HASH_FUNDAMENTAL(unsigned long);
_HASH_FUNDAMENTAL(long long);
_HASH_FUNDAMENTAL(unsigned long long);
_HASH_FUNDAMENTAL(float);
_HASH_FUNDAMENTAL(double);
_HASH_FUNDAMENTAL(long double);

template <class T> struct hash<T *>
{
  PRQA_SIZE_T operator () (T * val) const
  {
    return reinterpret_cast<PRQA_SIZE_T>(val) ;
  }
};

#undef _HASH_FUNDAMENTAL

  // 23.14.11, bind
  template<class T> struct is_bind_expression;
  template<class T> struct is_placeholder;

  template<typename R>
  struct __bind_result_t
  {
    template<typename ... UnboundArgs>
    R operator () (UnboundArgs && ...);
  };

  template<class F, class... BoundArgs>
  __bind_result_t<void> bind(F&&, BoundArgs&&...);

  template<class R, class F, class... BoundArgs>
  __bind_result_t<R> bind(F&&, BoundArgs&&...);

  namespace placeholders
  {
    struct __placeholder_t
    { };

    constexpr __placeholder_t _1 { };
    constexpr __placeholder_t _2 { };
    constexpr __placeholder_t _3 { };
    constexpr __placeholder_t _4 { };
    constexpr __placeholder_t _5 { };
    constexpr __placeholder_t _6 { };
    constexpr __placeholder_t _7 { };
    constexpr __placeholder_t _8 { };
    constexpr __placeholder_t _9 { };
  }

__QAC_END_NAMESPACE


// BEGIN BLOCK postfix
// Updated by paul on Tue Jun  8 11:15:37 IST 1999
#endif // ends __QAC_INCLUDE_functional__
// END BLOCK postfix

