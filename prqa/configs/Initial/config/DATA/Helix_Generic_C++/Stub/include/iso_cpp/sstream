// paulfitz Thu Jun  3 09:39:19 IST 1999

// BEGIN BLOCK prefix
// Updated by paul on Tue Jun  8 11:15:39 IST 1999
// Part of a simple implementation of the standard C++ library, as
// described in ISO/IEC 14882:1998(E)

#ifndef __QAC_INCLUDE_sstream__
#define __QAC_INCLUDE_sstream__

// Some flags to control how closely the standard is followed
#include <qac_config.h>

// END BLOCK prefix

#include <char_traits.h>
#include <memory>
#include <string>
#include <streambuf> // HIT only for test ; incomplete event
#include <locale>    // HIT only for test ; incomplete event
#include <iostream>

__QAC_BEGIN_NAMESPACE

/*
//  template <class charT, class traits = char_traits<charT>,
//		    class Allocator = allocator<charT> >
  template <class charT, class traits,
		    class Allocator>
    class basic_stringbuf;
*/

  typedef basic_stringbuf<char>     stringbuf;
  typedef basic_stringbuf<wchar_t> wstringbuf;

/*
  template <class charT, class traits,
		    class Allocator>
//  template <class charT, class traits = char_traits<charT>,
//		    class Allocator = allocator<charT> >
    class basic_istringstream;
*/

  typedef basic_istringstream<char>     istringstream;
  typedef basic_istringstream<wchar_t> wistringstream;

/*
  template <class charT, class traits = char_traits<charT>,
		    class Allocator = allocator<charT> >
    class basic_ostringstream;
*/

  typedef basic_ostringstream<char>     ostringstream;
  typedef basic_ostringstream<wchar_t> wostringstream;

/*
  template <class charT, class traits = char_traits<charT>,
		    class Allocator = allocator<charT> >
    class basic_stringstream;
*/

  typedef basic_stringstream<char>     stringstream;
  typedef basic_stringstream<wchar_t> wstringstream;




//  template <class charT, class traits = char_traits<charT>,
//	    class Allocator = allocator<charT> >
  template <class charT, class traits,
	    class Allocator>
  class basic_stringbuf : public basic_streambuf<charT,traits> {
  public:
    typedef charT                     char_type;
    typedef typename traits::int_type int_type;
    typedef typename traits::pos_type pos_type;
    typedef typename traits::off_type off_type;
    typedef traits                    traits_type;




    //  lib.stringbuf.cons Constructors:
    explicit basic_stringbuf(ios_base::openmode which
			      = ios_base::in | ios_base::out);
    explicit basic_stringbuf
	(const basic_string<charT,traits,Allocator>& str,
	 ios_base::openmode which = ios_base::in | ios_base::out);




    //  lib.stringbuf.members Get and set:
    basic_string<charT,traits,Allocator> str() const;
    void               str(const basic_string<charT,traits,Allocator>& s);




  protected:
    //  lib.stringbuf.virtuals Overridden virtual functions:
    virtual int_type   underflow();
    virtual int_type   pbackfail(int_type c = traits::eof());
    virtual int_type   overflow (int_type c = traits::eof());
    virtual  basic_streambuf<charT,traits>* setbuf(charT*, streamsize);





    virtual pos_type   seekoff(off_type off, ios_base::seekdir way,
			       ios_base::openmode which
				= ios_base::in | ios_base::out);
    virtual pos_type   seekpos(pos_type sp,
			       ios_base::openmode which
				= ios_base::in | ios_base::out);




  private:
//  ios_base::openmode mode;       exposition only
  };




//  template <class charT, class traits = char_traits<charT>,
//	    class Allocator = allocator<charT> >
  template <class charT, class traits,
	    class Allocator>
  class basic_istringstream : public basic_istream<charT,traits> {
  public:
    typedef charT                     char_type;
    typedef typename traits::int_type int_type;
    typedef typename traits::pos_type pos_type;
    typedef typename traits::off_type off_type;
    typedef traits                    traits_type;




    //  lib.istringstream.cons Constructors:
    explicit basic_istringstream(ios_base::openmode which = ios_base::in);
    explicit basic_istringstream(
		       const basic_string<charT,traits,Allocator>& str,
		       ios_base::openmode which = ios_base::in);




    //  lib.istringstream.members Members:
    basic_stringbuf<charT,traits,Allocator>* rdbuf() const;




    basic_string<charT,traits,Allocator> str() const;
    void str(const basic_string<charT,traits,Allocator>& s);
private:
//  basic_stringbuf<charT,traits,Allocator> sb;   exposition only
  };




//  template <class charT, class traits = char_traits<charT>,
//	    class Allocator = allocator<charT> >
  template <class charT, class traits,
	    class Allocator>
  class basic_ostringstream : public basic_ostream<charT,traits> {
  public:

    //  Types:
    typedef charT            char_type;
    typedef typename traits::int_type int_type;
    typedef typename traits::pos_type pos_type;
    typedef typename traits::off_type off_type;




    //  lib.ostringstream.cons Constructors/destructor:
    explicit basic_ostringstream(ios_base::openmode which = ios_base::out);
    explicit basic_ostringstream(
			 const basic_string<charT,traits,Allocator>& str,
			 ios_base::openmode which = ios_base::out);




    //  lib.ostringstream.members Members:
    basic_stringbuf<charT,traits,Allocator>* rdbuf() const;




    basic_string<charT,traits,Allocator> str() const;
    void    str(const basic_string<charT,traits,Allocator>& s);
 private:
//  basic_stringbuf<charT,traits,Allocator> sb;   exposition only
  };



//  template <class charT, class traits = char_traits<charT>,
//	    class Allocator = allocator<charT> >
  template <class charT, class traits,
	    class Allocator>
  class basic_stringstream
    : public basic_iostream<charT,traits> {
  public:




    //  Types
    typedef charT                     char_type;
    typedef typename traits::int_type int_type;
    typedef typename traits::pos_type pos_type;
    typedef typename traits::off_type off_type;




    //  constructors/destructors
    explicit basic_stringstream(
	ios_base::openmode which = ios_base::out|ios_base::in);
    explicit basic_stringstream(
	const basic_string<charT,traits,Allocator>& str,
	ios_base::openmode which = ios_base::out|ios_base::in);




    //  Members:
    basic_stringbuf<charT,traits,Allocator>* rdbuf() const;
    basic_string<charT,traits,Allocator> str() const;
    void str(const basic_string<charT,traits,Allocator>& str);




  private:
     // basic_stringbuf<charT, traits>  sb ;  exposition only
  };


__QAC_END_NAMESPACE




// BEGIN BLOCK postfix
// Updated by paul on Tue Jun  8 11:15:39 IST 1999
#endif // ends __QAC_INCLUDE_sstream__
// END BLOCK postfix

