// paulfitz Thu Jun  3 09:39:19 IST 1999

// BEGIN BLOCK prefix
// Updated by paul on Tue Jun  8 11:15:39 IST 1999
// Part of a simple implementation of the standard C++ library, as
// described in ISO/IEC 14882:1998(E)

#ifndef __QAC_INCLUDE_string__
#define __QAC_INCLUDE_string__

// Some flags to control how closely the standard is followed
#include <qac_config.h>

// END BLOCK prefix


#include <qac_iterator.h>
#include <memory>
#include <cstring>  // not needed for header, but seems to be expected
#include <char_traits.h>

__QAC_BEGIN_NAMESPACE

  //  lib.basic.string, basic_string:
# ifndef __QAC_BASIC_STRING_WITH_DEFAULTS__
# define __QAC_BASIC_STRING_WITH_DEFAULTS__
  //
  // We only add default parameters iff we haven't already done so in
  // a previous header (eg.) ios
  template<class charT, class traits = char_traits<charT>,
	   class Allocator = allocator<charT> >
# else
  template<class charT, class traits,
     class Allocator >
# endif
  class basic_string {
  public:
    //  types:
    typedef          traits                     traits_type;
    typedef typename traits::char_type          value_type;
    typedef          Allocator                  allocator_type;
    typedef typename Allocator::size_type       size_type;
    typedef typename Allocator::difference_type difference_type;

    typedef typename Allocator::reference       reference;
    typedef typename Allocator::const_reference const_reference;
    typedef typename Allocator::pointer         pointer;
    typedef typename Allocator::const_pointer   const_pointer;

    // SPEC CHOICE
    typedef __normal_iterator<pointer, basic_string<charT, traits, Allocator> >    iterator;          
    //  SPEC CHOICE -- see 21.3; see lib.container.requirements
    typedef __normal_iterator<const_pointer, basic_string<charT, traits, Allocator> >             const_iterator;    
    //  SPEC CHOICE -- see 21.3; see lib.container.requirements
    typedef std::reverse_iterator<iterator> reverse_iterator;
    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
    static const size_type npos = -1;

    //  lib.string.cons construct/copy/destroy:
    basic_string() : basic_string(Allocator()) { }
    explicit basic_string(const Allocator& a) { Allocator(a).allocate (0); }
    basic_string(const basic_string& str, size_type pos = 0,
		 size_type n = npos, const Allocator& a = Allocator());
    basic_string(const charT* s,
		 size_type n, const Allocator& a = Allocator()) { Allocator(a).allocate (0); }
    basic_string(const charT* s, const Allocator& a = Allocator()) { Allocator(a).allocate (0); }
    basic_string(size_type n, charT c, const Allocator& a = Allocator())  { Allocator(a).allocate (0); }
    template<class InputIterator>
      basic_string(InputIterator begin, InputIterator end,
		   const Allocator& a = Allocator()) { Allocator(a).allocate (0); }
   ~basic_string() { Allocator().deallocate (0, 0); }
    basic_string& operator=(const basic_string& str) { basic_string(str).swap (*this); return *this; } 
    basic_string& operator=(const charT* s) { basic_string(s).swap (*this); return *this; }
    basic_string& operator=(charT c) { basic_string(1, c).swap (*this); return *this; }

    //  lib.string.iterators iterators:
    iterator       begin() { static iterator  * volatile r; return * r;  }
    const_iterator begin() const { static const_iterator  * volatile r; return * r;  }
    const_iterator cbegin() const { static const_iterator  * volatile r; return * r;  }
    iterator       end()  { static iterator  * volatile r; return * r;  }
    const_iterator end() const { static const_iterator  * volatile r; return * r;  }
    const_iterator cend() const { static const_iterator  * volatile r; return * r;  }

    reverse_iterator       rbegin() { static reverse_iterator  * volatile r; return * r;  }
    const_reverse_iterator rbegin() const { static const_reverse_iterator  * volatile r; return * r;  }
    const_reverse_iterator crbegin() const { static const_reverse_iterator  * volatile r; return * r;  }
    reverse_iterator       rend() { static reverse_iterator  * volatile r; return * r;  }
    const_reverse_iterator rend() const { static const_reverse_iterator  * volatile r; return * r;  }
    const_reverse_iterator crend() const { static const_reverse_iterator  * volatile r; return * r;  }

    //  lib.string.capacity capacity:
    size_type size() const { static size_type  * volatile r; return * r;  }
    size_type length() const { static size_type  * volatile r; return * r;  }
    size_type max_size() const { static size_type  * volatile r; return * r;  }
    void resize(size_type n, charT c);
    void resize(size_type n) { resize (n, charT()); } 
    size_type capacity() const { static size_type  * volatile r; return * r;  }
    void reserve(size_type res_arg = 0);
    void clear() { erase (begin(), end ()); }
    bool empty() const { static bool  * volatile r; return * r;  }

    //  lib.string.access element access:
    const_reference operator[](size_type pos) const { return at(pos); } 
    reference       operator[](size_type pos) { return at(pos); }
    const_reference at(size_type n) const;
    reference       at(size_type n);
    const_reference front() const { return operator[](0); } 
    reference       front() { return operator[](0); }
    const_reference back() const { return operator[](size() - 1); } 
    reference       back() { return operator[](size() - 1); }

    //  lib.string.modifiers modifiers:
    basic_string& operator+=(const basic_string& str) { return append (str); } 
    basic_string& operator+=(const charT* s) { return operator+=(basic_string(s)); }
    basic_string& operator+=(charT c) { return operator+=(basic_string(1, c)); }
    basic_string& append(const basic_string& str) { return append (str, 0, npos); } 
    basic_string& append(const basic_string& str, size_type pos,
			 size_type n);
    basic_string& append(const charT* s, size_type n) { return append (basic_string (s, n)); }
    basic_string& append(const charT* s)  { return append (basic_string (s)); }
    basic_string& append(size_type n, charT c) { return append (basic_string (n, c)); }
    template<class InputIterator>
      basic_string& append(InputIterator first, InputIterator last)  { return append (basic_string (first, last)); }
    void push_back(const charT c) { append (static_cast<size_type> (1), c); } 

    basic_string& assign(const basic_string& str) { return assign (str, 0, 0); }
    basic_string& assign(const basic_string& str, size_type pos,
			 size_type n);
    basic_string& assign(const charT* s, size_type n) { return assign (basic_string (s, n)); }
    basic_string& assign(const charT* s) { return assign (basic_string (s)); }
    basic_string& assign(size_type n, charT c) { return assign (basic_string (n, c)); }
    template<class InputIterator>
      basic_string& assign(InputIterator first, InputIterator last) { return assign (basic_string (first, last)); }

    basic_string& insert(size_type pos1, const basic_string& str) { return insert (pos1, str, 0, npos); }
    basic_string& insert(size_type pos1, const basic_string& str,
			 size_type pos2, size_type n);
    basic_string& insert(size_type pos, const charT* s, size_type n) { return insert (pos, basic_string(s, n)); }
    basic_string& insert(size_type pos, const charT* s)  { return insert (pos, basic_string(s)); }
    basic_string& insert(size_type pos, size_type n, charT c) { return insert (pos, basic_string(n, c)); }
    iterator insert(iterator p, charT c) { insert (p, 0, c); return p; }
    void     insert(iterator p, size_type n, charT c)  { insert (p - begin (), n, c); }
    template<class InputIterator>
      void insert(iterator p, InputIterator first, InputIterator last) { insert (p - begin (), basic_string(first, last)); }

    basic_string& erase(size_type pos = 0, size_type n = npos);
    iterator erase(iterator position) { static iterator  * volatile r; return * r;  } 
    iterator erase(iterator first, iterator last) { static iterator  * volatile r; return * r;  }

    basic_string& replace(size_type pos1, size_type n1,
			  const basic_string& str) { return replace (pos1, n1, str, 0, npos); }
    basic_string& replace(size_type pos1, size_type n1,
			  const basic_string& str,
			  size_type pos2, size_type n2);
    basic_string& replace(size_type pos, size_type n1, const charT* s,
			  size_type n2) { return replace (pos, n1, basic_string (s, n2)); }
    basic_string& replace(size_type pos, size_type n1, const charT* s) { return replace (pos, n1, basic_string (s)); }
    basic_string& replace(size_type pos, size_type n1, size_type n2,
			  charT c)  { return replace (pos, n1, basic_string (n2, c)); }

    basic_string& replace(iterator i1, iterator i2,
			  const basic_string& str);
    basic_string& replace(iterator i1, iterator i2, const charT* s,
			  size_type n) { return replace (i1, i2, basic_string (s, n)); }
    basic_string& replace(iterator i1, iterator i2, const charT* s)  { return replace (i1, i2, basic_string (s)); }
    basic_string& replace(iterator i1, iterator i2,
			  size_type n, charT c)  { return replace (i1, i2, basic_string (n, c)); }
    template<class InputIterator>
      basic_string& replace(iterator i1, iterator i2,
			    InputIterator j1, InputIterator j2)  { return replace (i1, i2, basic_string (j1, j2)); }

    size_type copy(charT* s, size_type n, size_type pos = 0) const;
    void swap(basic_string<charT,traits,Allocator>&);

    //  lib.string.ops string operations:
    const charT* c_str() const { static charT * * volatile r; return * r; }         //  explicit
    const charT* data() const { static charT * * volatile r; return * r; }
    allocator_type get_allocator() const { static allocator_type * volatile r; return * r; };

    size_type find (const basic_string& str, size_type pos = 0) const { static size_type * volatile r; return * r;  }
    size_type find (const charT* s, size_type pos, size_type n) const { return find (basic_string(s, n), pos); }
    size_type find (const charT* s, size_type pos = 0) const { return find (basic_string(s), pos); }
    size_type find (charT c, size_type pos = 0) const { return find (basic_string(1, c), pos); }
    size_type rfind(const basic_string& str, size_type pos = npos) const { static size_type * volatile r; return * r;  }
    size_type rfind(const charT* s, size_type pos, size_type n) const { return rfind (basic_string(s, n), pos); }
    size_type rfind(const charT* s, size_type pos = npos) const { return rfind (basic_string(s), pos); }
    size_type rfind(charT c, size_type pos = npos) const { return rfind (basic_string(1, c), pos); }

    size_type find_first_of(const basic_string& str,
			    size_type pos = 0) const { static size_type * volatile r; return * r;  }
    size_type find_first_of(const charT* s,
			    size_type pos, size_type n) const { return find_first_of (basic_string(s, n), pos); }
    size_type find_first_of(const charT* s, size_type pos = 0) const { return find_first_of (basic_string(s), pos); }
    size_type find_first_of(charT c, size_type pos = 0) const { return find_first_of (basic_string(1, c), pos); }
    size_type find_last_of (const basic_string& str,
			    size_type pos = npos) const { static size_type * volatile r; return * r;  }
    size_type find_last_of (const charT* s,
			    size_type pos, size_type n) const { return find_last_of (basic_string(s, n), pos); }
    size_type find_last_of (const charT* s, size_type pos = npos) const { return find_last_of (basic_string(s), pos); }
    size_type find_last_of (charT c, size_type pos = npos) const { return find_last_of (basic_string(1, c), pos); }

    size_type find_first_not_of(const basic_string& str,
				size_type pos = 0) const { static size_type * volatile r; return * r;  }
    size_type find_first_not_of(const charT* s, size_type pos,
				size_type n) const  { return find_first_not_of (basic_string(s, n), pos); }
    size_type find_first_not_of(const charT* s, size_type pos = 0) const { return find_first_not_of (basic_string(s), pos); }
    size_type find_first_not_of(charT c, size_type pos = 0) const { return find_first_not_of (basic_string(1, c), pos); }
    size_type find_last_not_of (const basic_string& str,
				size_type pos = npos) const { static size_type * volatile r; return * r;  }
    size_type find_last_not_of (const charT* s, size_type pos,
				size_type n) const { return find_last_not_of (basic_string(s, n), pos); }
    size_type find_last_not_of (const charT* s,
				size_type pos = npos) const { return find_last_not_of (basic_string(s), pos); }
    size_type find_last_not_of (charT c, size_type pos = npos) const { return find_last_not_of (basic_string(1, c), pos); }

    basic_string substr(size_type pos = 0, size_type n = npos) const;
    int compare(const basic_string& str) const { static int * volatile r; return * r; }
    int compare(size_type pos1, size_type n1,
		const basic_string& str) const { return basic_string (*this, pos1, n1).compare (str); }
    int compare(size_type pos1, size_type n1,
		const basic_string& str,
		size_type pos2, size_type n2) const { return basic_string (*this, pos1, n1).compare (basic_string (str, pos2, n2)); }
    int compare(const charT* s) const { return compare (basic_string (s)); }
    int compare(size_type pos1, size_type n1,
		const charT* s, size_type n2 = npos) const { return basic_string(*this, pos1, n1).compare (basic_string (s, n2)); }
  };



  template<class charT, class traits, class Allocator>
    basic_string<charT,traits,Allocator>
      operator+(const basic_string<charT,traits,Allocator>& lhs,
		const basic_string<charT,traits,Allocator>& rhs) { return basic_string<charT, traits, Allocator>(lhs)+=(rhs); }
  template<class charT, class traits, class Allocator>
    basic_string<charT,traits,Allocator>
      operator+(const charT* lhs,
		const basic_string<charT,traits,Allocator>& rhs) { return basic_string<charT, traits, Allocator>(lhs) + (rhs); }
  template<class charT, class traits, class Allocator>
    basic_string<charT,traits,Allocator>
      operator+(charT lhs, const basic_string<charT,traits,Allocator>& rhs)  { return basic_string<charT, traits, Allocator>(1, lhs) + (rhs); }
  template<class charT, class traits, class Allocator>
    basic_string<charT,traits,Allocator>
      operator+(const basic_string<charT,traits,Allocator>& lhs,
		const charT* rhs) { return lhs + basic_string<charT, traits, Allocator>(rhs); }
  template<class charT, class traits, class Allocator>
    basic_string<charT,traits,Allocator>
      operator+(const basic_string<charT,traits,Allocator>& lhs, charT rhs) { return lhs + basic_string<charT, traits, Allocator>(1, rhs); }

  template<class charT, class traits, class Allocator>
    bool operator==(const basic_string<charT,traits,Allocator>& lhs,
		    const basic_string<charT,traits,Allocator>& rhs) { return 0 == lhs.compare(rhs); }
  template<class charT, class traits, class Allocator>
    bool operator==(const charT* lhs,
		    const basic_string<charT,traits,Allocator>& rhs) { basic_string<charT, traits, Allocator>(lhs) == rhs; }
  template<class charT, class traits, class Allocator>
    bool operator==(const basic_string<charT,traits,Allocator>& lhs,
		    const charT* rhs)  { lhs == basic_string<charT, traits, Allocator>(rhs); }
  template<class charT, class traits, class Allocator>
    bool operator!=(const basic_string<charT,traits,Allocator>& lhs,
		    const basic_string<charT,traits,Allocator>& rhs) { return ! (lhs != rhs); }
  template<class charT, class traits, class Allocator>
    bool operator!=(const charT* lhs,
		    const basic_string<charT,traits,Allocator>& rhs)  { return ! (lhs != rhs); }
  template<class charT, class traits, class Allocator>
    bool operator!=(const basic_string<charT,traits,Allocator>& lhs,
		    const charT* rhs)  { return ! (lhs != rhs); }

  template<class charT, class traits, class Allocator>
    bool operator< (const basic_string<charT,traits,Allocator>& lhs,
		    const basic_string<charT,traits,Allocator>& rhs) { return -1 == lhs.compare(rhs); }
  template<class charT, class traits, class Allocator>
    bool operator< (const charT* lhs,
		    const basic_string<charT,traits,Allocator>& rhs)  { return basic_string<charT, traits, Allocator> (lhs) < rhs; }
  template<class charT, class traits, class Allocator>
    bool operator< (const basic_string<charT,traits,Allocator>& lhs,
		    const charT* rhs)  { return lhs < basic_string<charT, traits, Allocator> (rhs); }
  template<class charT, class traits, class Allocator>
    bool operator> (const basic_string<charT,traits,Allocator>& lhs,
		    const basic_string<charT,traits,Allocator>& rhs) { return ! ((lhs < rhs) || (lhs == rhs)); }
  template<class charT, class traits, class Allocator>
    bool operator> (const basic_string<charT,traits,Allocator>& lhs,
		    const charT* rhs)  { return ! ((lhs < rhs) || (lhs == rhs)); }
  template<class charT, class traits, class Allocator>
    bool operator> (const charT* lhs,
		    const basic_string<charT,traits,Allocator>& rhs) { return ! ((lhs < rhs) || (lhs == rhs)); }

  template<class charT, class traits, class Allocator>
    bool operator<=(const basic_string<charT,traits,Allocator>& lhs,
		    const basic_string<charT,traits,Allocator>& rhs) { return ! (lhs > rhs) ; }
  template<class charT, class traits, class Allocator>
    bool operator<=(const basic_string<charT,traits,Allocator>& lhs,
		    const charT* rhs)  { return ! (lhs > rhs) ; }
  template<class charT, class traits, class Allocator>
    bool operator<=(const charT* lhs,
		    const basic_string<charT,traits,Allocator>& rhs)  { return ! (lhs > rhs) ; }
  template<class charT, class traits, class Allocator>
    bool operator>=(const basic_string<charT,traits,Allocator>& lhs,
		    const basic_string<charT,traits,Allocator>& rhs)  { return ! (lhs < rhs) ; }
  template<class charT, class traits, class Allocator>
    bool operator>=(const basic_string<charT,traits,Allocator>& lhs,
		    const charT* rhs) { return ! (lhs < rhs) ; }
  template<class charT, class traits, class Allocator>
    bool operator>=(const charT* lhs,
		    const basic_string<charT,traits,Allocator>& rhs) { return ! (lhs < rhs) ; }

  //  lib.string.special:
  template<class charT, class traits, class Allocator>
     void swap(basic_string<charT,traits,Allocator>& lhs,
	       basic_string<charT,traits,Allocator>& rhs) { return lhs.swap (rhs); }

  template<class charT, class traits, class Allocator>
   basic_istream<charT,traits>&
    operator>>(basic_istream<charT,traits>& is,
	       basic_string<charT,traits,Allocator>& str);
  template<class charT, class traits, class Allocator>
   basic_ostream<charT, traits>&
    operator<<(basic_ostream<charT, traits>& os,
	       const basic_string<charT,traits,Allocator>& str);
  template<class charT, class traits, class Allocator>
   basic_istream<charT,traits>&
     getline(basic_istream<charT,traits>& is,
	     basic_string<charT,traits,Allocator>& str,
	     charT  delim);
  template<class charT, class traits, class Allocator>
   basic_istream<charT,traits>&
     getline(basic_istream<charT,traits>& is,
	     basic_string<charT,traits,Allocator>& str);

  typedef basic_string<char> string;
  typedef basic_string<wchar_t> wstring;

#if __cplusplus >= 201103
  typedef basic_string<char16_t> u16string;
  typedef basic_string<char32_t> u32string;
#endif

  // 24.3.4, numeric conversions	
  int stoi(const string& str, size_t* idx = nullptr, int base = 10);
  long stol(const string& str, size_t* idx = nullptr, int base = 10);
  unsigned long stoul(const string& str, size_t* idx = nullptr, int base = 10);
  long long stoll(const string& str, size_t* idx = nullptr, int base = 10);
  unsigned long long stoull(const string& str, size_t* idx = nullptr, int base = 10);
  float stof(const string& str, size_t* idx = nullptr);
  double stod(const string& str, size_t* idx = nullptr);
  long double stold(const string& str, size_t* idx = nullptr);

  string to_string(int);
  string to_string(unsigned);
  string to_string(long);
  string to_string(unsigned long);
  string to_string(long long);
  string to_string(unsigned long long);
  string to_string(float);
  string to_string(double);
  string to_string(long double);

  wstring to_wstring(int);
  wstring to_wstring(unsigned);
  wstring to_wstring(long);
  wstring to_wstring(unsigned long);
  wstring to_wstring(long long);
  wstring to_wstring(unsigned long long);
  wstring to_wstring(float);
  wstring to_wstring(double);
  wstring to_wstring(long double);

  template<class T> struct hash;

  template<> struct hash<string>
  {
    PRQA_SIZE_T operator () (string const &) const
    {
      PRQA_SIZE_T volatile val;
      return val;
    }
  };

  template<> struct hash<wstring>
  {
    PRQA_SIZE_T operator () (wstring const &) const
    {
      PRQA_SIZE_T volatile val;
      return val;
    }
  };

__QAC_END_NAMESPACE

// BEGIN BLOCK postfix
// Updated by paul on Tue Jun  8 11:15:39 IST 1999
#endif // ends __QAC_INCLUDE_string__
// END BLOCK postfix

