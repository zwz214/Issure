// paulfitz Thu Jun  3 09:39:18 IST 1999

// BEGIN BLOCK prefix
// Updated by paul on Tue Jun  8 11:15:37 IST 1999
// Part of a simple implementation of the standard C++ library, as
// described in ISO/IEC 14882:1998(E)

#ifndef __QAC_INCLUDE_iterator__
#define __QAC_INCLUDE_iterator__

// Some flags to control how closely the standard is followed
#include <qac_config.h>

// END BLOCK prefix

#include <char_traits.h>
#include <iosfwd>
#include <cstddef>

__QAC_BEGIN_NAMESPACE


  template<class Iterator> struct iterator_traits {
    typedef typename Iterator::difference_type difference_type;
    typedef typename Iterator::value_type value_type;
    typedef typename Iterator::pointer pointer;
    typedef typename Iterator::reference reference;
    typedef typename Iterator::iterator_category iterator_category;
  };


  template<class Category, class T,
    class Distance = ptrdiff_t, class Pointer = T*, class Reference = T&>
  struct iterator {
  protected:
  ~iterator () {}
  
  public:
	typedef T         value_type;
	typedef Distance  difference_type;
	typedef Pointer   pointer;
	typedef Reference reference;
	typedef Category  iterator_category;
  };


  template <class Iterator>
  class reverse_iterator : public
        iterator<typename iterator_traits<Iterator>::iterator_category,
		 typename iterator_traits<Iterator>::value_type,
		 typename iterator_traits<Iterator>::difference_type,
		 typename iterator_traits<Iterator>::pointer,
		 typename iterator_traits<Iterator>::reference> {
  protected:
    Iterator current;
  public:
    typedef Iterator
	iterator_type;
    typedef typename iterator_traits<Iterator>::difference_type
	difference_type;
    typedef typename iterator_traits<Iterator>::reference
	reference;
    typedef typename iterator_traits<Iterator>::pointer
	pointer;

    reverse_iterator() {}
    explicit reverse_iterator(Iterator x) : current(x) { }
    template <class U> reverse_iterator(const reverse_iterator<U>& u) : current (u.current) {}

    Iterator base() const { static Iterator * volatile r; return * r;  }      //  explicit
    reference operator*() const { return  *(operator-> ()); } 
    pointer   operator->() const { static pointer * volatile r; return * r;  }

    reverse_iterator& operator++()     { return *this; }
    reverse_iterator  operator++(int)  { static reverse_iterator * volatile r; return * r;  }
    reverse_iterator& operator--()     { return *this; }
    reverse_iterator  operator--(int)  { static reverse_iterator * volatile r; return * r;  }

    reverse_iterator  operator+ (difference_type n) const  { static reverse_iterator * volatile r; return * r;  }
    reverse_iterator& operator+=(difference_type n)        { return *this; }
    reverse_iterator  operator- (difference_type n) const  { static reverse_iterator * volatile r; return * r;  }
    reverse_iterator& operator-=(difference_type n)        { return *this; }
    reference operator[](difference_type n) const          { return (operator*()); }
  };


  struct input_iterator_tag {};
  struct output_iterator_tag {};
  struct forward_iterator_tag: public input_iterator_tag {};
  struct bidirectional_iterator_tag: public forward_iterator_tag {};
  struct random_access_iterator_tag: public bidirectional_iterator_tag {};


  template<class T> struct iterator_traits<T*> {
    typedef ptrdiff_t difference_type;
    typedef T value_type;
    typedef T* pointer;
    typedef T& reference;
    typedef random_access_iterator_tag iterator_category;
  };


  template<class T> struct iterator_traits<const T*> {
    typedef ptrdiff_t difference_type;
    typedef T value_type;
    typedef const T* pointer;
    typedef const T& reference;
    typedef random_access_iterator_tag iterator_category;
  };


// SPEC NOTES If there is an additional pointer type __far such that the 
// difference of two __far is of type long, an implementation may define...
// (removed this code)


  //  lib.iterator.operations, iterator operations:
  template <class InputIterator, class Distance>
    void advance(InputIterator& i, Distance n) { while (n--) ++i; }

  template <class InputIterator>
    typename iterator_traits<InputIterator>::difference_type
    distance(InputIterator first, InputIterator last) { typename iterator_traits<InputIterator>::difference_type n = 0; while (first != last) { ++first; ++n; } return n; }

  template <class InputIterator>
    constexpr InputIterator next(InputIterator x,
    typename std::iterator_traits<InputIterator>::difference_type n = 1)
  {
    std::advance(x, n);
    return x;
  }

  template <class BidirectionalIterator>
  constexpr BidirectionalIterator prev(BidirectionalIterator x,
  typename std::iterator_traits<BidirectionalIterator>::difference_type n = 1)
  {
    std::advance(x, -n);
    return x;
  }

  template <class Iterator1, class Iterator2>
    bool operator==(
      const reverse_iterator<Iterator1>& x,
      const reverse_iterator<Iterator2>& y) { static bool  * volatile r; return * r;  }
  template <class Iterator1, class Iterator2>
    bool operator<(
      const reverse_iterator<Iterator1>& x,
      const reverse_iterator<Iterator2>& y) { static bool  * volatile r; return * r;  }
  template <class Iterator1, class Iterator2>
    bool operator!=(
      const reverse_iterator<Iterator1>& x,
      const reverse_iterator<Iterator2>& y) { static bool  * volatile r; return * r;  }
  template <class Iterator1, class Iterator2>
    bool operator>(
      const reverse_iterator<Iterator1>& x,
      const reverse_iterator<Iterator2>& y) { static bool  * volatile r; return * r;  }
  template <class Iterator1, class Iterator2>
    bool operator>=(
      const reverse_iterator<Iterator1>& x,
      const reverse_iterator<Iterator2>& y) { static bool  * volatile r; return * r;  }
  template <class Iterator1, class Iterator2>
    bool operator<=(
      const reverse_iterator<Iterator1>& x,
      const reverse_iterator<Iterator2>& y) { static bool  * volatile r; return * r;  }


  template <class Iterator>
    typename reverse_iterator<Iterator>::difference_type operator-(
      const reverse_iterator<Iterator>& x,
      const reverse_iterator<Iterator>& y) { static typename reverse_iterator<Iterator>::difference_type * volatile r; return * r;  }
  template <class Iterator>
    reverse_iterator<Iterator>
      operator+(
	typename reverse_iterator<Iterator>::difference_type n,
	const reverse_iterator<Iterator>& x) { return x + n; }


  template <class Container>
  class back_insert_iterator :
        public iterator<output_iterator_tag,void,void,void,void> {
  protected:
    Container* container;
  public:
    typedef Container container_type;
    explicit back_insert_iterator(Container& x) {}
    back_insert_iterator<Container>&
      operator=(typename Container::const_reference value) { container->push_back (value); return *this; }
    back_insert_iterator<Container>& operator*() { return *this; }
    back_insert_iterator<Container>& operator++() { return *this; }
    back_insert_iterator<Container>  operator++(int) { return *this; }
  };

  template <class Container>
    back_insert_iterator<Container> back_inserter(Container& x) { return back_insert_iterator<Container> (x); } 


  template <class Container>
  class front_insert_iterator :
        public iterator<output_iterator_tag,void,void,void,void> {
  protected:
    Container* container;
  public:
    typedef Container container_type;
    explicit front_insert_iterator(Container& x) {}
    front_insert_iterator<Container>&
      operator=(typename Container::const_reference value) { container->push_front (value); return *this; }
    front_insert_iterator<Container>& operator*() { return *this; } 
    front_insert_iterator<Container>& operator++() { return *this; } 
    front_insert_iterator<Container>  operator++(int) { return *this; } 
  };

  template <class Container>
    front_insert_iterator<Container> front_inserter(Container& x) { return front_insert_iterator<Container> (x); }


  template <class Container>
  class insert_iterator :
        public iterator<output_iterator_tag,void,void,void,void> {
  protected:
    Container* container;
    typename Container::iterator iter;
  public:
    typedef Container container_type;
    insert_iterator(Container& x, typename Container::iterator i) { }
    insert_iterator<Container>&
      operator=(typename Container::const_reference value) { iter = container->insert (iter, value); ++iter; return *this; }
    insert_iterator<Container>& operator*()      { return *this; }
    insert_iterator<Container>& operator++()     { return *this; }
    insert_iterator<Container>& operator++(int)  { return *this; }
  };

  template <class Container, class Iterator>
    insert_iterator<Container> inserter(Container& x, Iterator i) { return insert_iterator<Container> (x, i); } 


  template <class T, class charT = char, class traits = char_traits<charT> >
  class ostream_iterator:
    public iterator<output_iterator_tag, void, void, void, void> {
  public:
    typedef charT char_type;
    typedef traits traits_type;
    typedef basic_ostream<charT,traits> ostream_type;
    ostream_iterator(ostream_type& s);
    ostream_iterator(ostream_type& s, const charT* delimiter);
    ostream_iterator(const ostream_iterator<T,charT,traits>& x);
   ~ostream_iterator();
    ostream_iterator<T,charT,traits>& operator=(const T& value);
    ostream_iterator<T,charT,traits>& operator*();
    ostream_iterator<T,charT,traits>& operator++();
    ostream_iterator<T,charT,traits>& operator++(int);
  };


//  template<class charT, class traits = char_traits<charT> >
  template<class charT, class traits>
  class istreambuf_iterator
     : public iterator<input_iterator_tag, charT,
                       typename traits::off_type, charT*, charT&> {
  public:
    typedef charT                         char_type;
    typedef traits                        traits_type;
    typedef typename traits::int_type     int_type;
    typedef basic_streambuf<charT,traits> streambuf_type;
    typedef basic_istream<charT,traits>   istream_type;
    class proxy;                        // exposition only
  public:
      istreambuf_iterator() noexcept;
      istreambuf_iterator(istream_type& s) noexcept;
      istreambuf_iterator(streambuf_type* s) noexcept;
      istreambuf_iterator(const proxy& p) noexcept;
      charT operator*() const;
      istreambuf_iterator<charT,traits>& operator++();
      proxy operator++(int);
      bool equal(istreambuf_iterator& b);
  };

    template<class charT, class traits>
    class istreambuf_iterator<charT, traits>::proxy
    {
      charT keep_;
      basic_streambuf<charT,traits>* sbuf_;
      proxy(charT c, basic_streambuf<charT,traits>* sbuf)
        : keep_(c), sbuf_(sbuf) { }
    public:
      charT operator*() { return keep_; }
    };

  template <class charT, class traits>
    bool operator==(const istreambuf_iterator<charT,traits>& a,
		    const istreambuf_iterator<charT,traits>& b);

  template <class charT, class traits>
    bool operator!=(const istreambuf_iterator<charT,traits>& a,
		    const istreambuf_iterator<charT,traits>& b);


  template <class T, class charT = char, class traits = char_traits<charT>,
      class Distance = ptrdiff_t>
  class istream_iterator:
    public iterator<input_iterator_tag, T, Distance, const T*, const T&> {
  public:
    // SPEC TYPO (assumed) -- added semicolon
    typedef charT char_type;
    typedef traits traits_type;
    typedef basic_istream<charT,traits> istream_type;
    istream_iterator();
    istream_iterator(istream_type& s);
    istream_iterator(const istream_iterator<T,charT,traits,Distance>& x);
   ~istream_iterator();

    const T& operator*() const;
    const T* operator->() const;
    istream_iterator<T,charT,traits,Distance>& operator++();
    istream_iterator<T,charT,traits,Distance>  operator++(int);
  };


  template <class T, class charT, class traits, class Distance>
    bool operator==(const istream_iterator<T,charT,traits,Distance>& x,
		    const istream_iterator<T,charT,traits,Distance>& y);
  template <class T, class charT, class traits, class Distance>
    bool operator!=(const istream_iterator<T,charT,traits,Distance>& x,
		    const istream_iterator<T,charT,traits,Distance>& y);


//  template <class charT, class traits = char_traits<charT> >
  template <class charT, class traits>
  class ostreambuf_iterator:
    public iterator<output_iterator_tag, void, void, void, void> {
  public:
    typedef charT                         char_type;
    typedef traits                        traits_type;
    typedef basic_streambuf<charT,traits> streambuf_type;
    typedef basic_ostream<charT,traits>   ostream_type;
  public:
    ostreambuf_iterator(ostream_type& s) noexcept;
    ostreambuf_iterator(streambuf_type* s) noexcept;
    ostreambuf_iterator& operator=(charT c);
    ostreambuf_iterator& operator*();
    ostreambuf_iterator& operator++();
    ostreambuf_iterator& operator++(int);
    bool failed() const noexcept;
  };

#if __cplusplus >= 201103
  template< class C >
  constexpr auto begin( C & c ) -> decltype(c.begin());
  template< class C >
  constexpr auto begin( const C & c ) -> decltype(c.begin());
  template< class T, size_t N >
  constexpr T* begin( T (&array)[N] );

  template< class C >
  constexpr auto cbegin( const C & c ) -> decltype(std::begin(c));

  template< class C >
  constexpr auto end( const C & c ) -> decltype(c.end());
  template< class C >
  constexpr auto end( C & c ) -> decltype(c.end());
  template< class T, size_t N >
  constexpr T* end( T (&array)[N] );

  template< class C >
  constexpr auto cend( const C & c ) -> decltype(std::end(c));
#endif

__QAC_END_NAMESPACE


// BEGIN BLOCK postfix
// Updated by paul on Tue Jun  8 11:15:37 IST 1999
#endif // ends __QAC_INCLUDE_iterator__
// END BLOCK postfix

